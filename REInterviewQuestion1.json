[
    {
        "id": 1,
        "topicId": 1,
        "questionId": 1,
        "question": "What is React?",
        "answer": [
            "React is a JavaScript library for building user interfaces."
        ]
    },
    {
        "id": 2,
        "topicId": 1,
        "questionId": 2,
        "question": "What are components in React?",
        "answer": [
            "Components are independent, reusable pieces of UI in a React application."
        ]
    },
    {
        "id": 3,
        "topicId": 1,
        "questionId": 3,
        "question": "What is JSX?",
        "answer": [
            "JSX is a syntax extension that allows writing HTML tags inside JavaScript code in React."
        ]
    },
    {
        "id": 4,
        "topicId": 1,
        "questionId": 4,
        "question": "What is a state in React?",
        "answer": [
            "State is an object that determines how a component renders and behaves."
        ]
    },
    {
        "id": 5,
        "topicId": 1,
        "questionId": 5,
        "question": "What is a prop in React?",
        "answer": [
            "Props are short for properties and are used to pass data from one component to another."
        ]
    },
    {
        "id": 6,
        "topicId": 1,
        "questionId": 6,
        "question": "What is a lifecycle method in React?",
        "answer": [
            "Lifecycle methods are functions that get called at different phases of a component's life."
        ]
    },
    {
        "id": 7,
        "topicId": 1,
        "questionId": 7,
        "question": "What is the virtual DOM?",
        "answer": [
            "The virtual DOM is a lightweight copy of the actual DOM that helps React perform updates efficiently."
        ]
    },
    {
        "id": 8,
        "topicId": 1,
        "questionId": 8,
        "question": "What is a hook in React?",
        "answer": [
            "Hooks are functions that let you use state and other React features in functional components."
        ]
    },
    {
        "id": 9,
        "topicId": 1,
        "questionId": 9,
        "question": "What is useState?",
        "answer": [
            "useState is a hook that lets you add state to functional components.",
            "```jsx",
            "const [count, setCount] = useState(0);",
            "```"
        ]
    },
    {
        "id": 10,
        "topicId": 1,
        "questionId": 10,
        "question": "What is useEffect?",
        "answer": [
            "useEffect is a hook that lets you perform side effects in functional components.",
            "```jsx",
            "useEffect(() => {",
            "  document.title = `You clicked ${count} times`;",
            "}, [count]);",
            "```"
        ]
    },
    {
        "id": 11,
        "topicId": 1,
        "questionId": 11,
        "question": "What are controlled components in React?",
        "answer": [
            "Controlled components are components that take their current value through props and notify changes through callbacks like onChange.",
            "```jsx",
            "class NameForm extends React.Component {",
            "  constructor(props) {",
            "    super(props);",
            "    this.state = {value: ''};",
            "  }",
            "",
            "  handleChange = (event) => {",
            "    this.setState({value: event.target.value});",
            "  }",
            "",
            "  handleSubmit = (event) => {",
            "    alert('A name was submitted: ' + this.state.value);",
            "    event.preventDefault();",
            "  }",
            "",
            "  render() {",
            "    return (",
            "      <form onSubmit={this.handleSubmit}>",
            "        <label>",
            "          Name:",
            "          <input type='text' value={this.state.value} onChange={this.handleChange} />",
            "        </label>",
            "        <input type='submit' value='Submit' />",
            "      </form>",
            "    );",
            "  }",
            "}",
            "```"
        ]
    },
    {
        "id": 12,
        "topicId": 1,
        "questionId": 12,
        "question": "What is Context in React?",
        "answer": [
            "Context provides a way to pass data through the component tree without having to pass props down manually at every level.",
            "```jsx",
            "const ThemeContext = React.createContext('light');",
            "",
            "class ThemeProvider extends React.Component {",
            "  render() {",
            "    return (",
            "      <ThemeContext.Provider value='dark'>",
            "        {this.props.children}",
            "      </ThemeContext.Provider>",
            "    );",
            "  }",
            "}",
            "",
            "function ThemedButton() {",
            "  return (",
            "    <ThemeContext.Consumer>",
            "      {theme => <button className={theme}>Theme Button</button>}",
            "    </ThemeContext.Consumer>",
            "  );",
            "}",
            "```"
        ]
    },
    {
        "id": 13,
        "topicId": 1,
        "questionId": 13,
        "question": "What are Higher-Order Components (HOC) in React?",
        "answer": [
            "Higher-Order Components are functions that take a component and return a new component with enhanced functionality.",
            "```jsx",
            "function withSubscription(WrappedComponent, selectData) {",
            "  return class extends React.Component {",
            "    constructor(props) {",
            "      super(props);",
            "      this.state = {",
            "        data: selectData(DataSource, props)",
            "      };",
            "    }",
            "",
            "    render() {",
            "      return <WrappedComponent data={this.state.data} {...this.props} />;",
            "    }",
            "  };",
            "}",
            "```"
        ]
    },
    {
        "id": 14,
        "topicId": 1,
        "questionId": 14,
        "question": "What is React Router?",
        "answer": [
            "React Router is a standard library for routing in React.",
            "```bash",
            "npm install react-router-dom",
            "```",
            "```jsx",
            "import { BrowserRouter as Router, Route, Link } from 'react-router-dom';",
            "",
            "function App() {",
            "  return (",
            "    <Router>",
            "      <div>",
            "        <nav>",
            "          <ul>",
            "            <li>",
            "              <Link to='/'>Home</Link>",
            "            </li>",
            "            <li>",
            "              <Link to='/about'>About</Link>",
            "            </li>",
            "            <li>",
            "              <Link to='/topics'>Topics</Link>",
            "            </li>",
            "          </ul>",
            "        </nav>",
            "",
            "        <Route path='/' exact component={Home} />",
            "        <Route path='/about' component={About} />",
            "        <Route path='/topics' component={Topics} />",
            "      </div>",
            "    </Router>",
            "  );",
            "}",
            "```"
        ]
    },
    {
        "id": 15,
        "topicId": 1,
        "questionId": 15,
        "question": "What is Redux?",
        "answer": [
            "Redux is a predictable state container for JavaScript apps.",
            "```bash",
            "npm install redux",
            "```",
            "```jsx",
            "import { createStore } from 'redux';",
            "",
            "const counterReducer = (state = { value: 0 }, action) => {",
            "  switch (action.type) {",
            "    case 'increment':",
            "      return { value: state.value + 1 };",
            "    case 'decrement':",
            "      return { value: state.value - 1 };",
            "    default:",
            "      return state;",
            "  }",
            "};",
            "",
            "const store = createStore(counterReducer);",
            "```"
        ]
    },
    {
        "id": 16,
        "topicId": 1,
        "questionId": 16,
        "question": "What are React Hooks Rules?",
        "answer": [
            "Only call hooks at the top level (not inside loops, conditions, or nested functions).",
            "Only call hooks from React functional components or custom hooks.",
            "```jsx",
            "import React, { useState, useEffect } from 'react';",
            "",
            "function Example() {",
            "  const [count, setCount] = useState(0);",
            "",
            "  useEffect(() => {",
            "    document.title = `You clicked ${count} times`;",
            "  }, [count]);",
            "",
            "  return (",
            "    <div>",
            "      <p>You clicked {count} times</p>",
            "      <button onClick={() => setCount(count + 1)}>Click me</button>",
            "    </div>",
            "  );",
            "}",
            "```"
        ]
    },
    {
        "id": 17,
        "topicId": 1,
        "questionId": 17,
        "question": "What are React Testing Libraries?",
        "answer": [
            "React Testing Library is a set of helpers that let you test React components without relying on their implementation details.",
            "```bash",
            "npm install --save-dev @testing-library/react",
            "```",
            "```jsx",
            "import React from 'react';",
            "import { render, screen } from '@testing-library/react';",
            "import App from './App';",
            "",
            "test('renders learn react link', () => {",
            "  render(<App />);",
            "  const linkElement = screen.getByText(/learn react/i);",
            "  expect(linkElement).toBeInTheDocument();",
            "});",
            "```"
        ]
    },
    {
        "id": 18,
        "topicId": 1,
        "questionId": 18,
        "question": "What are React Fragments?",
        "answer": [
            "React Fragments let you group multiple children elements without adding extra nodes to the DOM.",
            "```jsx",
            "function App() {",
            "  return (",
            "    <React.Fragment>",
            "      <ChildA />",
            "      <ChildB />",
            "    </React.Fragment>",
            "  );",
            "}",
            "```"
        ]
    },
    {
        "id": 19,
        "topicId": 1,
        "questionId": 19,
        "question": "What is React.memo()?",
        "answer": [
            "React.memo() is a higher-order component that memoizes the result of the component rendering.",
            "```jsx",
            "const MyComponent = React.memo(function MyComponent(props) {",
            "  /* render using props */",
            "});",
            "```"
        ]
    },
    {
        "id": 20,
        "topicId": 1,
        "questionId": 20,
        "question": "What is the difference between controlled and uncontrolled components in React?",
        "answer": [
            "Controlled components are components that maintain their own state, while their data is controlled by React through props. Uncontrolled components are components that maintain their own state internally using refs.",
            "```jsx",
            "// Controlled Component",
            "class ControlledInput extends React.Component {",
            "  constructor(props) {",
            "    super(props);",
            "    this.state = { value: '' };",
            "  }",
            "",
            "  handleChange = (event) => {",
            "    this.setState({ value: event.target.value });",
            "  }",
            "",
            "  render() {",
            "    return (",
            "      <input type='text' value={this.state.value} onChange={this.handleChange} />",
            "    );",
            "  }",
            "}",
            "",
            "// Uncontrolled Component",
            "class UncontrolledInput extends React.Component {",
            "  constructor(props) {",
            "    super(props);",
            "    this.inputRef = React.createRef();",
            "  }",
            "",
            "  handleSubmit = () => {",
            "    console.log('Input Value:', this.inputRef.current.value);",
            "  }",
            "",
            "  render() {",
            "    return (",
            "      <input type='text' ref={this.inputRef} />",
            "    );",
            "  }",
            "}",
            "```"
        ]
    },
    {
        "id": 21,
        "topicId": 1,
        "questionId": 21,
        "question": "What is React?",
        "answer": [
            "React is a JavaScript library for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React allows developers to create large web applications that can update and render efficiently in response to data changes."
        ]
    },
    {
        "id": 22,
        "topicId": 1,
        "questionId": 22,
        "question": "What are the main features of React?",
        "answer": [
            "The main features of React include: Declarative UI, Component-Based architecture, Virtual DOM, One-Way Data Binding, and JSX (JavaScript XML)."
        ]
    },
    {
        "id": 23,
        "topicId": 1,
        "questionId": 23,
        "question": "What is JSX?",
        "answer": [
            "JSX stands for JavaScript XML. It is a syntax extension for JavaScript that looks similar to XML or HTML. JSX allows developers to write HTML structures in the same file as JavaScript code, making it easier to understand and manage the UI code."
        ]
    },
    {
        "id": 24,
        "topicId": 1,
        "questionId": 24,
        "question": "What is the Virtual DOM?",
        "answer": [
            "The Virtual DOM is a lightweight representation of the real DOM. React uses the Virtual DOM to optimize updates to the real DOM by minimizing the number of changes that need to be made. When the state of an object changes, the Virtual DOM is updated first, then compared to the real DOM, and only the differences are updated in the real DOM."
        ]
    },
    {
        "id": 25,
        "topicId": 1,
        "questionId": 25,
        "question": "What are React components?",
        "answer": [
            "React components are the building blocks of a React application. They are reusable pieces of code that represent a part of the user interface. Components can be either class-based or functional, and they can accept inputs (called 'props') and manage their own state."
        ]
    },
    {
        "id": 26,
        "topicId": 1,
        "questionId": 26,
        "question": "What is the difference between a class component and a functional component?",
        "answer": [
            "Class components are ES6 classes that extend from `React.Component` and have a `render` method to return JSX. Functional components are simple JavaScript functions that return JSX. With the introduction of React Hooks, functional components can now manage state and side effects, making them more powerful and preferred over class components."
        ]
    },
    {
        "id": 27,
        "topicId": 1,
        "questionId": 27,
        "question": "What are props in React?",
        "answer": [
            "Props (short for 'properties') are inputs to a React component. They are passed to the component via HTML attributes and can be used to pass data and event handlers to child components. Props are immutable, meaning they cannot be changed by the component that receives them."
        ]
    },
    {
        "id": 28,
        "topicId": 1,
        "questionId": 28,
        "question": "What is state in React?",
        "answer": [
            "State is a built-in object in React components that holds data or information about the component. State can be updated within the component, and when it changes, the component re-renders to reflect the new state. Unlike props, state is mutable and managed within the component."
        ]
    },
    {
        "id": 29,
        "topicId": 1,
        "questionId": 29,
        "question": "What is the purpose of the `setState` method?",
        "answer": [
            "`setState` is a method used in class components to update the component's state. When `setState` is called, React schedules a re-render of the component with the updated state. This method takes an object representing the new state or a function that returns the new state."
        ]
    },
    {
        "id": 30,
        "topicId": 1,
        "questionId": 30,
        "question": "What are lifecycle methods in React?",
        "answer": [
            "Lifecycle methods are special methods in React class components that are called at different stages of a component's life (i.e., when it is mounted, updated, or unmounted). Common lifecycle methods include `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`."
        ]
    },
    {
        "id": 31,
        "topicId": 1,
        "questionId": 31,
        "question": "What is the purpose of the `componentDidMount` method?",
        "answer": [
            "`componentDidMount` is a lifecycle method in class components that is called after the component has been rendered to the DOM for the first time. It is commonly used to perform side effects such as fetching data or subscribing to events."
        ]
    },
    {
        "id": 32,
        "topicId": 1,
        "questionId": 32,
        "question": "What is the purpose of the `componentDidUpdate` method?",
        "answer": [
            "`componentDidUpdate` is a lifecycle method in class components that is called after the component has been updated (i.e., after the state or props have changed). It is commonly used to perform side effects that need to happen in response to the component updating."
        ]
    },
    {
        "id": 33,
        "topicId": 1,
        "questionId": 33,
        "question": "What is the purpose of the `componentWillUnmount` method?",
        "answer": [
            "`componentWillUnmount` is a lifecycle method in class components that is called just before the component is removed from the DOM. It is commonly used to clean up resources such as event listeners or timers that were set up in `componentDidMount`."
        ]
    },
    {
        "id": 34,
        "topicId": 1,
        "questionId": 34,
        "question": "What are React Hooks?",
        "answer": [
            "React Hooks are functions that let you use state and other React features in functional components. They were introduced in React 16.8 and include hooks such as `useState`, `useEffect`, `useContext`, `useReducer`, and `useRef`."
        ]
    },
    {
        "id": 35,
        "topicId": 1,
        "questionId": 35,
        "question": "What is the `useState` hook?",
        "answer": [
            "`useState` is a hook that allows you to add state to functional components. It returns an array with two elements: the current state value and a function to update it. For example:",
            "```js",
            "const [count, setCount] = useState(0);",
            "```"
        ]
    },
    {
        "id": 36,
        "topicId": 1,
        "questionId": 36,
        "question": "What is the `useEffect` hook?",
        "answer": [
            "`useEffect` is a hook that lets you perform side effects in functional components. It takes a function as its first argument and an optional array of dependencies as its second argument. The effect function is executed after the component renders, and it can optionally return a cleanup function to run when the component unmounts or when the dependencies change."
        ]
    },
    {
        "id": 37,
        "topicId": 1,
        "questionId": 37,
        "question": "How does the dependency array in `useEffect` work?",
        "answer": [
            "The dependency array in `useEffect` is used to specify when the effect function should be executed. If the array is empty, the effect runs only once after the initial render. If it contains values, the effect runs after every render where any of the dependencies have changed. If the array is omitted, the effect runs after every render."
        ]
    },
    {
        "id": 38,
        "topicId": 1,
        "questionId": 38,
        "question": "What is the `useContext` hook?",
        "answer": [
            "`useContext` is a hook that lets you access the value of a context directly in a functional component. It takes a context object as its argument and returns the current context value for that context."
        ]
    },
    {
        "id": 39,
        "topicId": 1,
        "questionId": 39,
        "question": "What is the `useReducer` hook?",
        "answer": [
            "`useReducer` is a hook that lets you manage complex state logic in functional components. It works similarly to `useState`, but instead of returning a state value and an updater function, it returns a state value and a dispatch function. It takes a reducer function and an initial state as arguments."
        ]
    },
    {
        "id": 40,
        "topicId": 1,
        "questionId": 40,
        "question": "What is the `useRef` hook?",
        "answer": [
            "`useRef` is a hook that lets you create a mutable object that persists across renders. It is commonly used to access and interact with DOM elements or to keep a reference to a value that does not trigger a re-render when updated."
        ]
    },
    {
        "id": 41,
        "topicId": 1,
        "questionId": 41,
        "question": "How do you create a context in React?",
        "answer": [
            "To create a context in React, you use the `createContext` function. It returns a context object with a `Provider` and `Consumer` component. For example:",
            "```js",
            "const MyContext = createContext();",
            "const MyProvider = MyContext.Provider;",
            "const MyConsumer = MyContext.Consumer;",
            "```"
        ]
    },
    {
        "id": 42,
        "topicId": 1,
        "questionId": 42,
        "question": "What is the `Provider` component in React context?",
        "answer": [
            "The `Provider` component is part of the context API in React. It is used to pass the current context value to the tree of components that are its descendants. The `Provider` component takes a `value` prop, which will be passed down to the consuming components."
        ]
    },
    {
        "id": 43,
        "topicId": 1,
        "questionId": 43,
        "question": "What is the `Consumer` component in React context?",
        "answer": [
            "The `Consumer` component is part of the context API in React. It is used to access the current context value from within a component. The `Consumer` component requires a function as its child, which receives the current context value as its argument and returns a React element."
        ]
    },
    {
        "id": 44,
        "topicId": 1,
        "questionId": 44,
        "question": "How do you use the `useContext` hook with a custom context?",
        "answer": [
            "To use the `useContext` hook with a custom context, you first create the context using `createContext`, then use `useContext` within a functional component to access the context value. For example:",
            "```js",
            "const MyContext = createContext();",
            "const MyComponent = () => {",
            "  const value = useContext(MyContext);",
            "  return <div>{value}</div>;",
            "};",
            "```"
        ]
    },
    {
        "id": 45,
        "topicId": 1,
        "questionId": 45,
        "question": "What is the `useMemo` hook?",
        "answer": [
            "`useMemo` is a hook that memoizes the result of a calculation, only recalculating it when one of the dependencies changes. It is used to optimize performance by avoiding expensive calculations on every render. For example:",
            "```js",
            "const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);",
            "```"
        ]
    },
    {
        "id": 46,
        "topicId": 1,
        "questionId": 46,
        "question": "What is the `useCallback` hook?",
        "answer": [
            "`useCallback` is a hook that returns a memoized callback function, which only changes when one of the dependencies changes. It is used to optimize performance by preventing unnecessary re-renders of child components that depend on the callback. For example:",
            "```js",
            "const memoizedCallback = useCallback(() => {",
            "  doSomething(a, b);",
            "}, [a, b]);",
            "```"
        ]
    },
    {
        "id": 47,
        "topicId": 1,
        "questionId": 47,
        "question": "What is the `useLayoutEffect` hook?",
        "answer": [
            "`useLayoutEffect` is a hook that runs synchronously after all DOM mutations but before the browser paints. It is similar to `useEffect`, but it is used for reading layout and synchronously re-rendering. Use `useLayoutEffect` for tasks that need to happen before the browser paints, like measuring the DOM."
        ]
    },
    {
        "id": 48,
        "topicId": 1,
        "questionId": 48,
        "question": "How do you handle events in React?",
        "answer": [
            "In React, events are handled using event handlers written in camelCase syntax. You pass the event handler function as a prop to the element where the event occurs. For example:",
            "```js",
            "const handleClick = () => {",
            "  console.log('Button clicked');",
            "};",
            "return <button onClick={handleClick}>Click me</button>;",
            "```"
        ]
    },
    {
        "id": 49,
        "topicId": 1,
        "questionId": 49,
        "question": "What are synthetic events in React?",
        "answer": [
            "Synthetic events in React are objects that wrap the native browser events to ensure that events have consistent properties across different browsers. They work the same way as native events but provide cross-browser compatibility and additional features."
        ]
    },
    {
        "id": 50,
        "topicId": 1,
        "questionId": 50,
        "question": "How do you conditionally render components in React?",
        "answer": [
            "In React, you can conditionally render components using JavaScript expressions inside JSX. Common methods include using the ternary operator, logical AND operator, and conditional (if-else) statements. For example:",
            "```js",
            "const isLoggedIn = true;",
            "return (",
            "  <div>",
            "    {isLoggedIn ? <Dashboard /> : <Login />}",
            "  </div>",
            ");",
            "```"
        ]
    },
    {
        "id": 51,
        "topicId": 1,
        "questionId": 51,
        "question": "What is the `key` prop and why is it important?",
        "answer": [
            "The `key` prop is a special attribute in React used to uniquely identify elements in a list. It helps React optimize rendering by efficiently updating and reordering elements. Keys should be stable, predictable, and unique for each element in the list."
        ]
    },
    {
        "id": 52,
        "topicId": 1,
        "questionId": 52,
        "question": "How do you pass data between components in React?",
        "answer": [
            "In React, you pass data between components using props. Parent components pass data to child components via props, while child components can communicate with parent components by calling functions passed down as props."
        ]
    },
    {
        "id": 53,
        "topicId": 1,
        "questionId": 53,
        "question": "What is prop drilling and how do you avoid it?",
        "answer": [
            "Prop drilling is the process of passing props down multiple levels of a component tree to reach a deeply nested component. It can make the code difficult to maintain. To avoid prop drilling, you can use context, state management libraries like Redux, or custom hooks."
        ]
    },
    {
        "id": 54,
        "topicId": 1,
        "questionId": 54,
        "question": "What are controlled and uncontrolled components in React?",
        "answer": [
            "Controlled components are form elements that derive their value from state and are updated via event handlers. Uncontrolled components, on the other hand, maintain their own state and are accessed using refs. Controlled components are preferred for handling form data in React."
        ]
    },
    {
        "id": 55,
        "topicId": 1,
        "questionId": 55,
        "question": "What is the difference between state and props?",
        "answer": [
            "State is a local data storage that is private to a component and can be changed within the component. Props are inputs to a component passed down from parent components and are immutable. Props are used to pass data and event handlers to child components."
        ]
    },
    {
        "id": 56,
        "topicId": 1,
        "questionId": 56,
        "question": "What are higher-order components (HOCs) in React?",
        "answer": [
            "Higher-order components (HOCs) are functions that take a component and return a new component with additional props or behavior. HOCs are used to reuse component logic and to inject props, state, or methods into wrapped components. They are an advanced pattern for code reuse."
        ]
    },
    {
        "id": 57,
        "topicId": 1,
        "questionId": 57,
        "question": "What are render props in React?",
        "answer": [
            "Render props is a pattern for sharing code between components using a prop whose value is a function. The function returns a React element and can contain the shared code logic. This pattern is useful for component composition and reusability."
        ]
    },
    {
        "id": 58,
        "topicId": 1,
        "questionId": 58,
        "question": "What is the `React.Fragment` component?",
        "answer": [
            "`React.Fragment` is a component that lets you group a list of children without adding extra nodes to the DOM. It is useful for returning multiple elements from a component's render method without wrapping them in an extra element like a `div`."
        ]
    },
    {
        "id": 59,
        "topicId": 1,
        "questionId": 59,
        "question": "What is the `useImperativeHandle` hook?",
        "answer": [
            "`useImperativeHandle` is a hook that lets you customize the instance value that is exposed to parent components when using refs. It is used with `forwardRef` to pass a ref to a child component and allows you to define methods that the parent component can call."
        ]
    },
    {
        "id": 60,
        "topicId": 1,
        "questionId": 60,
        "question": "What is the `useDebugValue` hook?",
        "answer": [
            "`useDebugValue` is a hook that lets you display a label for custom hooks in React DevTools. It is used for debugging custom hooks by providing a descriptive label for the hook's state or value."
        ]
    },
    {
        "id": 61,
        "topicId": 1,
        "questionId": 61,
        "question": "What is reconciliation in React?",
        "answer": [
            "Reconciliation is the process React uses to update the DOM with changes in the component state. React uses the Virtual DOM to compare the new element tree with the previous one and determines the minimum number of changes required to update the real DOM."
        ]
    },
    {
        "id": 62,
        "topicId": 1,
        "questionId": 62,
        "question": "What is React Fiber?",
        "answer": [
            "React Fiber is a complete rewrite of the React reconciliation algorithm. It improves the performance and capabilities of React by enabling features like incremental rendering, pausing and resuming work, and handling animations, layout, and gestures."
        ]
    },
    {
        "id": 63,
        "topicId": 1,
        "questionId": 63,
        "question": "What are the benefits of using React?",
        "answer": [
            "The benefits of using React include: Component-based architecture, Improved performance with Virtual DOM, Reusable components, Unidirectional data flow, Easy to learn and use, Strong community support, and Rich ecosystem of libraries and tools."
        ]
    },
    {
        "id": 64,
        "topicId": 1,
        "questionId": 64,
        "question": "What is the difference between React and Angular?",
        "answer": [
            "React is a library focused on building user interfaces, while Angular is a full-fledged framework for building web applications. React uses a virtual DOM, while Angular uses a real DOM. React is based on JSX, while Angular uses templates. React promotes one-way data binding, while Angular uses two-way data binding."
        ]
    },
    {
        "id": 65,
        "topicId": 1,
        "questionId": 65,
        "question": "What is the difference between React and Vue?",
        "answer": [
            "React is a library for building user interfaces, while Vue is a progressive framework for building web applications. React uses JSX for rendering UI, while Vue uses templates. React relies heavily on a virtual DOM, while Vue offers both a virtual DOM and a real DOM. Vue has a more opinionated structure, while React is more flexible."
        ]
    },
    {
        "id": 66,
        "topicId": 1,
        "questionId": 66,
        "question": "What is the difference between `useEffect` and `useLayoutEffect`?",
        "answer": [
            "`useEffect` is used for side effects that do not require immediate DOM updates, while `useLayoutEffect` is used for side effects that need to occur before the browser paints. `useLayoutEffect` runs synchronously after DOM mutations but before the paint, whereas `useEffect` runs asynchronously after the paint."
        ]
    },
    {
        "id": 67,
        "topicId": 1,
        "questionId": 67,
        "question": "What is React Router?",
        "answer": [
            "React Router is a library for handling navigation and routing in React applications. It allows developers to define routes, navigate between pages, and manage application state based on the URL. React Router supports both client-side and server-side routing."
        ]
    },
    {
        "id": 68,
        "topicId": 1,
        "questionId": 68,
        "question": "How do you create routes in React Router?",
        "answer": [
            "To create routes in React Router, you use the `Route` component to define the path and the component to render. The `Switch` component is used to group multiple routes. For example:",
            "```js",
            "import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';",
            "import Home from './Home';",
            "import About from './About';",
            "const App = () => (",
            "  <Router>",
            "    <Switch>",
            "      <Route exact path='/' component={Home} />",
            "      <Route path='/about' component={About} />",
            "    </Switch>",
            "  </Router>",
            ");",
            "```"
        ]
    },
    {
        "id": 69,
        "topicId": 1,
        "questionId": 69,
        "question": "What is lazy loading in React?",
        "answer": [
            "Lazy loading in React is the technique of loading components only when they are needed. It improves performance by reducing the initial load time. React supports lazy loading using the `React.lazy` function and the `Suspense` component. For example:",
            "```js",
            "const LazyComponent = React.lazy(() => import('./LazyComponent'));",
            "const App = () => (",
            "  <Suspense fallback={<div>Loading...</div>}>",
            "    <LazyComponent />",
            "  </Suspense>",
            ");",
            "```"
        ]
    },
    {
        "id": 70,
        "topicId": 1,
        "questionId": 70,
        "question": "What is code splitting in React?",
        "answer": [
            "Code splitting is the process of breaking down a large bundle of JavaScript code into smaller chunks that can be loaded on demand. In React, code splitting is achieved using dynamic `import()` statements and the `React.lazy` function. Code splitting improves performance by reducing the initial load time."
        ]
    },
    {
        "id": 71,
        "topicId": 1,
        "questionId": 71,
        "question": "How do you handle forms in React?",
        "answer": [
            "Forms in React are handled using controlled components, where the form data is managed by the component's state. You can create input fields and bind their values to state variables using the `value` attribute and update the state using event handlers such as `onChange`."
        ]
    },
    {
        "id": 72,
        "topicId": 1,
        "questionId": 72,
        "question": "What is the `useForm` hook?",
        "answer": [
            "`useForm` is a custom hook for managing form state in React. It provides methods for handling form input values, validation, and submission. Libraries like `react-hook-form` provide a `useForm` hook to simplify form handling in React applications."
        ]
    },
    {
        "id": 73,
        "topicId": 1,
        "questionId": 73,
        "question": "What are portals in React?",
        "answer": [
            "Portals in React provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. They are useful for rendering elements that need to break out of their parent containers, such as modals or tooltips."
        ]
    },
    {
        "id": 74,
        "topicId": 1,
        "questionId": 74,
        "question": "How do you create a portal in React?",
        "answer": [
            "To create a portal in React, you use the `ReactDOM.createPortal` method. It takes two arguments: the JSX to render and the DOM node to render it into. For example:",
            "```js",
            "ReactDOM.createPortal(<div>Portal Content</div>, document.getElementById('portal-root'));",
            "```"
        ]
    },
    {
        "id": 75,
        "topicId": 1,
        "questionId": 75,
        "question": "What is server-side rendering (SSR) in React?",
        "answer": [
            "Server-side rendering (SSR) in React is the process of rendering components on the server and sending the HTML to the client. SSR improves performance and SEO by delivering a fully-rendered page to the client. Libraries like `Next.js` provide built-in support for SSR in React applications."
        ]
    },
    {
        "id": 76,
        "topicId": 1,
        "questionId": 76,
        "question": "What is static site generation (SSG) in React?",
        "answer": [
            "Static site generation (SSG) is a method of pre-rendering React pages at build time. SSG generates static HTML files for each page, which can be served directly to clients without the need for server-side rendering on each request. Libraries like `Next.js` provide built-in support for SSG."
        ]
    },
    {
        "id": 77,
        "topicId": 1,
        "questionId": 77,
        "question": "What is incremental static regeneration (ISR) in React?",
        "answer": [
            "Incremental static regeneration (ISR) is a feature of `Next.js` that allows static pages to be updated incrementally after the initial build. ISR enables you to retain the benefits of static generation while allowing content updates without rebuilding the entire site. Pages can be revalidated and regenerated in the background as traffic comes in."
        ]
    },
    {
        "id": 78,
        "topicId": 1,
        "questionId": 78,
        "question": "What is a custom hook in React?",
        "answer": [
            "A custom hook in React is a JavaScript function that uses one or more built-in hooks to encapsulate and reuse stateful logic. Custom hooks start with the `use` prefix and can call other hooks inside them. They help to keep the component code clean and promote code reuse."
        ]
    },
    {
        "id": 79,
        "topicId": 1,
        "questionId": 79,
        "question": "How do you create a custom hook in React?",
        "answer": [
            "To create a custom hook in React, you define a function that uses one or more built-in hooks and return the necessary values or functions. For example:",
            "```js",
            "const useCustomHook = (initialValue) => {",
            "  const [value, setValue] = useState(initialValue);",
            "  const handleChange = (newValue) => setValue(newValue);",
            "  return [value, handleChange];",
            "};",
            "```"
        ]
    },
    {
        "id": 80,
        "topicId": 1,
        "questionId": 80,
        "question": "What are React dev tools?",
        "answer": [
            "React dev tools are browser extensions that help developers inspect and debug React components. They provide a component tree view, props and state inspection, performance monitoring, and the ability to edit props and state directly in the browser. Popular tools include the React Developer Tools extension for Chrome and Firefox."
        ]
    },
    {
        "id": 81,
        "topicId": 1,
        "questionId": 81,
        "question": "What is the use of `React.StrictMode`?",
        "answer": [
            "`React.StrictMode` is a tool for highlighting potential problems in an application. It activates additional checks and warnings for its descendants, helping developers write resilient and future-proof React components. It only runs in development mode."
        ]
    },
    {
        "id": 82,
        "topicId": 1,
        "questionId": 82,
        "question": "What is the difference between `React.memo` and `useMemo`?",
        "answer": [
            "`React.memo` is a higher-order component used to memoize functional components, preventing unnecessary re-renders. `useMemo` is a hook that memoizes a value, recalculating it only when its dependencies change. Both are used for performance optimization but serve different purposes."
        ]
    },
    {
        "id": 83,
        "topicId": 1,
        "questionId": 83,
        "question": "What is JSX?",
        "answer": [
            "JSX (JavaScript XML) is a syntax extension for JavaScript used in React. It allows you to write HTML-like code within JavaScript, which is then transformed into React elements. JSX makes it easier to write and understand the structure of React components."
        ]
    },
    {
        "id": 84,
        "topicId": 1,
        "questionId": 84,
        "question": "How do you handle errors in React components?",
        "answer": [
            "Errors in React components can be handled using error boundaries. An error boundary is a component that catches JavaScript errors anywhere in its child component tree, logs them, and displays a fallback UI instead of crashing the whole app. It is created using the `componentDidCatch` lifecycle method or `static getDerivedStateFromError`."
        ]
    },
    {
        "id": 85,
        "topicId": 1,
        "questionId": 85,
        "question": "What is the `forwardRef` function in React?",
        "answer": [
            "`forwardRef` is a function in React used to pass a ref from a parent component to a child component. It allows parent components to directly access the DOM nodes or React elements of their children. It is useful for creating reusable components that expose their internal DOM nodes."
        ]
    },
    {
        "id": 86,
        "topicId": 1,
        "questionId": 86,
        "question": "What is the `useReducer` hook?",
        "answer": [
            "`useReducer` is a hook used for managing complex state logic in React components. It is an alternative to `useState` and is particularly useful for state that involves multiple sub-values or requires complex state transitions. It accepts a reducer function and an initial state."
        ]
    },
    {
        "id": 87,
        "topicId": 1,
        "questionId": 87,
        "question": "What are React portals used for?",
        "answer": [
            "React portals are used for rendering children into a DOM node that exists outside the DOM hierarchy of the parent component. They are useful for scenarios like modals, tooltips, and popovers where you need to visually break out of the parent container's styling."
        ]
    },
    {
        "id": 88,
        "topicId": 1,
        "questionId": 88,
        "question": "How do you create a context provider in React?",
        "answer": [
            "To create a context provider in React, you first create a context using `createContext` and then wrap the context provider around the component tree that needs access to the context value. The provider component uses a `value` prop to pass down the current context value."
        ]
    },
    {
        "id": 89,
        "topicId": 1,
        "questionId": 89,
        "question": "How do you handle side effects in React?",
        "answer": [
            "Side effects in React are handled using the `useEffect` hook. It allows you to perform actions such as fetching data, subscribing to services, or manually changing the DOM. The `useEffect` hook accepts a function and an optional array of dependencies."
        ]
    },
    {
        "id": 90,
        "topicId": 1,
        "questionId": 90,
        "question": "What is the `useRef` hook?",
        "answer": [
            "`useRef` is a hook that returns a mutable ref object with a `current` property. It is commonly used to access and interact with DOM elements, store a value that persists across renders, or hold mutable values without causing re-renders."
        ]
    },
    {
        "id": 91,
        "topicId": 1,
        "questionId": 91,
        "question": "What are fragments in React?",
        "answer": [
            "Fragments in React allow you to group multiple elements without adding extra nodes to the DOM. They are useful for returning multiple elements from a component's render method without wrapping them in an additional container element like a `div`."
        ]
    },
    {
        "id": 92,
        "topicId": 1,
        "questionId": 92,
        "question": "How do you implement conditional rendering in React?",
        "answer": [
            "Conditional rendering in React can be implemented using JavaScript expressions inside JSX. Common methods include using the ternary operator, logical AND operator, and conditional (if-else) statements to conditionally render components or elements based on the state or props."
        ]
    },
    {
        "id": 93,
        "topicId": 1,
        "questionId": 93,
        "question": "What are prop types in React?",
        "answer": [
            "Prop types in React are used to document and validate the props passed to a component. React provides the `prop-types` library to define the expected types and shapes of props. Prop types help catch bugs and make components more predictable by enforcing prop validation."
        ]
    },
    {
        "id": 94,
        "topicId": 1,
        "questionId": 94,
        "question": "How do you optimize performance in a React application?",
        "answer": [
            "Performance in a React application can be optimized by using techniques such as code splitting, lazy loading, memoization with `React.memo` and `useMemo`, optimizing re-renders with `useCallback`, using a proper key prop in lists, and avoiding unnecessary state updates."
        ]
    },
    {
        "id": 95,
        "topicId": 1,
        "questionId": 95,
        "question": "What is the `useTransition` hook?",
        "answer": [
            "`useTransition` is a hook used for managing state transitions in React applications. It allows you to mark a state update as non-urgent, letting React know it can be interrupted by more urgent updates, such as user input. It helps in improving the perceived performance of the application."
        ]
    },
    {
        "id": 96,
        "topicId": 1,
        "questionId": 96,
        "question": "What is the `useDeferredValue` hook?",
        "answer": [
            "`useDeferredValue` is a hook that lets you defer the value of a state or prop. It is useful for deferring non-urgent updates to improve performance. The deferred value updates later, avoiding blocking more urgent updates like user input."
        ]
    },
    {
        "id": 97,
        "topicId": 1,
        "questionId": 97,
        "question": "What is the `useId` hook?",
        "answer": [
            "`useId` is a hook that generates unique IDs for use in React components. It is useful for accessibility purposes, such as linking form elements with their labels. `useId` ensures that the IDs are consistent across server and client renders."
        ]
    },
    {
        "id": 98,
        "topicId": 1,
        "questionId": 98,
        "question": "How do you handle asynchronous code in React components?",
        "answer": [
            "Asynchronous code in React components is handled using JavaScript promises and the `async`/`await` syntax. Side effects like data fetching are performed inside `useEffect`, where you can use `async` functions and handle asynchronous operations."
        ]
    },
    {
        "id": 99,
        "topicId": 1,
        "questionId": 99,
        "question": "What is the `useSyncExternalStore` hook?",
        "answer": [
            "`useSyncExternalStore` is a hook used for reading from and subscribing to an external store. It is useful for integrating React with external state management libraries or other data sources that need to sync with React's state."
        ]
    },
    {
        "id": 100,
        "topicId": 1,
        "questionId": 100,
        "question": "What is React Hydration?",
        "answer": [
            "React Hydration is the process of attaching event listeners to the server-rendered HTML. When React renders on the client, it attaches to the existing markup instead of overwriting it. This is commonly used in server-side rendering (SSR) to make the application interactive."
        ]
    },
    {
        "id": 101,
        "topicId": 1,
        "questionId": 101,
        "question": "What is the difference between `PureComponent` and `Component`?",
        "answer": [
            "`PureComponent` is a base class in React that implements `shouldComponentUpdate` with a shallow prop and state comparison. It helps to optimize performance by preventing unnecessary re-renders. `Component` is the base class without this optimization, meaning it re-renders by default on state or prop changes."
        ]
    },
    {
        "id": 102,
        "topicId": 1,
        "questionId": 102,
        "question": "What is the `useContext` hook?",
        "answer": [
            "`useContext` is a hook that allows you to consume a context value in functional components. It eliminates the need to use the `Consumer` component and makes the code more readable. It takes a context object and returns the current context value."
        ]
    },
    {
        "id": 103,
        "topicId": 1,
        "questionId": 103,
        "question": "How do you create a higher-order component (HOC) in React?",
        "answer": [
            "A higher-order component (HOC) in React is created by defining a function that takes a component and returns a new component with added functionality. HOCs are used for code reuse and logic abstraction. For example:",
            "```js",
            "const withExtraProps = (WrappedComponent) => {",
            "  return (props) => <WrappedComponent {...props} extraProp='value' />;",
            "};",
            "```"
        ]
    },
    {
        "id": 104,
        "topicId": 1,
        "questionId": 104,
        "question": "What is the `useImperativeHandle` hook used for?",
        "answer": [
            "`useImperativeHandle` is a hook used to customize the instance value that is exposed to parent components when using refs. It allows you to define methods that the parent component can call, providing more control over the child component's behavior."
        ]
    },
    {
        "id": 105,
        "topicId": 1,
        "questionId": 105,
        "question": "What is the `useDebugValue` hook used for?",
        "answer": [
            "`useDebugValue` is a hook used to display a label for custom hooks in React DevTools. It is useful for debugging custom hooks by providing a descriptive label for the hook's state or value."
        ]
    },
    {
        "id": 106,
        "topicId": 1,
        "questionId": 106,
        "question": "What are controlled components in React?",
        "answer": [
            "Controlled components in React are form elements where the component's state is the single source of truth. Their values are controlled by the component's state, and changes are handled by event handlers that update the state. This makes it easier to manage and validate form data."
        ]
    },
    {
        "id": 107,
        "topicId": 1,
        "questionId": 107,
        "question": "What are uncontrolled components in React?",
        "answer": [
            "Uncontrolled components in React are form elements that maintain their own internal state. They use refs to access the DOM elements directly and do not rely on the component's state for their values. This is closer to traditional HTML form elements."
        ]
    },
    {
        "id": 108,
        "topicId": 1,
        "questionId": 108,
        "question": "What is the purpose of keys in React?",
        "answer": [
            "Keys in React are used to identify which items in a list have changed, been added, or removed. They help React optimize rendering by tracking elements efficiently. Keys should be unique and stable for each item within a list."
        ]
    },
    {
        "id": 109,
        "topicId": 1,
        "questionId": 109,
        "question": "What is the difference between `React.lazy` and `React.Suspense`?",
        "answer": [
            "`React.lazy` is used to lazily load a component dynamically, splitting the code and reducing the initial load time. `React.Suspense` is a component that wraps lazy-loaded components, displaying a fallback while the component is loading. They are often used together to implement code splitting."
        ]
    },
    {
        "id": 110,
        "topicId": 1,
        "questionId": 110,
        "question": "How do you handle events in React?",
        "answer": [
            "Events in React are handled using event handlers, which are passed as props to elements. Event handlers are named using camelCase and can access the event object, which provides information about the event. Common events include `onClick`, `onChange`, and `onSubmit`."
        ]
    },
    {
        "id": 111,
        "topicId": 1,
        "questionId": 111,
        "question": "What is the `useMemo` hook?",
        "answer": [
            "`useMemo` is a hook used to memoize a value or computation, recomputing it only when its dependencies change. It helps optimize performance by avoiding expensive calculations on every render. It takes a function and an array of dependencies as arguments."
        ]
    },
    {
        "id": 112,
        "topicId": 1,
        "questionId": 112,
        "question": "What is the `useCallback` hook?",
        "answer": [
            "`useCallback` is a hook used to memoize a callback function, recreating it only when its dependencies change. It helps optimize performance by preventing unnecessary re-renders of child components that rely on the callback. It takes a function and an array of dependencies as arguments."
        ]
    },
    {
        "id": 113,
        "topicId": 1,
        "questionId": 113,
        "question": "How do you handle component lifecycle in functional components?",
        "answer": [
            "Component lifecycle in functional components is managed using hooks like `useEffect`, `useLayoutEffect`, and `useState`. These hooks provide similar functionality to class component lifecycle methods, allowing you to run side effects, manage state, and perform cleanup operations."
        ]
    },
    {
        "id": 114,
        "topicId": 1,
        "questionId": 114,
        "question": "What is the `useLayoutEffect` hook?",
        "answer": [
            "`useLayoutEffect` is a hook that runs synchronously after all DOM mutations but before the browser has a chance to paint. It is used for reading layout and synchronously re-rendering. It is similar to `useEffect`, but it is intended for side effects that require immediate DOM updates."
        ]
    },
    {
        "id": 115,
        "topicId": 1,
        "questionId": 115,
        "question": "How do you manage state in React?",
        "answer": [
            "State in React can be managed using the `useState` hook for local state in functional components, `useReducer` for complex state logic, and context for global state. External state management libraries like Redux or MobX can also be used for larger applications."
        ]
    },
    {
        "id": 116,
        "topicId": 1,
        "questionId": 116,
        "question": "What is the `useEffect` hook?",
        "answer": [
            "`useEffect` is a hook used to perform side effects in functional components. It runs after the component renders and can be used for tasks like data fetching, subscriptions, and manually changing the DOM. It accepts a function and an optional array of dependencies."
        ]
    },
    {
        "id": 117,
        "topicId": 1,
        "questionId": 117,
        "question": "What is the `useState` hook?",
        "answer": [
            "`useState` is a hook that allows you to add state to functional components. It returns an array with two elements: the current state value and a function to update it. It takes an initial state value as an argument."
        ]
    },
    {
        "id": 118,
        "topicId": 1,
        "questionId": 118,
        "question": "What are hooks in React?",
        "answer": [
            "Hooks in React are functions that let you use state and other React features in functional components. They provide a way to manage state, perform side effects, and access lifecycle methods without using class components. Common hooks include `useState`, `useEffect`, and `useContext`."
        ]
    },
    {
        "id": 119,
        "topicId": 1,
        "questionId": 119,
        "question": "What is the Virtual DOM?",
        "answer": [
            "The Virtual DOM is an in-memory representation of the real DOM elements generated by React components. It enables efficient updates by diffing the new virtual DOM tree with the previous one and applying the minimal number of changes to the real DOM."
        ]
    },
    {
        "id": 120,
        "topicId": 1,
        "questionId": 120,
        "question": "What is React?",
        "answer": [
            "React is a JavaScript library for building user interfaces. It allows developers to create reusable UI components, manage state, and efficiently update the DOM using a virtual DOM. React was developed by Facebook and is widely used for building single-page applications."
        ]
    },
    {
        "id": 121,
        "topicId": 1,
        "questionId": 121,
        "question": "How do you pass data between components in React?",
        "answer": [
            "Data in React is passed between components using props for parent-to-child communication and state lifting or context for child-to-parent and sibling-to-sibling communication. Props are immutable, while state and context can be updated to reflect changes."
        ]
    },
    {
        "id": 122,
        "topicId": 1,
        "questionId": 122,
        "question": "What are higher-order components (HOCs)?",
        "answer": [
            "Higher-order components (HOCs) are functions that take a component and return a new component with added functionality. HOCs are used for code reuse, logic abstraction, and cross-cutting concerns like authentication, data fetching, and theming. They are an advanced pattern in React."
        ]
    },
    {
        "id": 123,
        "topicId": 1,
        "questionId": 123,
        "question": "What is server-side rendering (SSR) in React?",
        "answer": [
            "Server-side rendering (SSR) is a technique where React components are rendered on the server and the resulting HTML is sent to the client. This improves performance and SEO by providing a fully rendered page on the first request, which can be interacted with immediately."
        ]
    },
    {
        "id": 124,
        "topicId": 1,
        "questionId": 124,
        "question": "What is the difference between state and props in React?",
        "answer": [
            "State is a local data storage that is mutable and managed within a component. Props are external data passed from a parent component to a child component and are immutable. State is used for dynamic data, while props are used for configuration and communication between components."
        ]
    },
    {
        "id": 125,
        "topicId": 1,
        "questionId": 125,
        "question": "What is React Router?",
        "answer": [
            "React Router is a library used for routing in React applications. It enables navigation between different views or pages, allowing developers to build single-page applications with dynamic routing. React Router provides components like `Route`, `Link`, and `Switch` for declarative routing."
        ]
    },
    {
        "id": 126,
        "topicId": 1,
        "questionId": 126,
        "question": "What is the `useParams` hook in React Router?",
        "answer": [
            "`useParams` is a hook in React Router that returns an object of key-value pairs from the current URL's parameters. It is used to access dynamic route parameters in functional components, making it easy to work with routes that include variables."
        ]
    },
    {
        "id": 127,
        "topicId": 1,
        "questionId": 127,
        "question": "How do you handle forms in React?",
        "answer": [
            "Forms in React are handled using controlled or uncontrolled components. Controlled components use state to manage form values, while uncontrolled components use refs to access form elements. Event handlers like `onChange` and `onSubmit` are used to handle user input and form submission."
        ]
    },
    {
        "id": 128,
        "topicId": 1,
        "questionId": 128,
        "question": "What is the difference between `useEffect` and `useLayoutEffect`?",
        "answer": [
            "`useEffect` runs after the render is committed to the screen, while `useLayoutEffect` runs synchronously after all DOM mutations but before the browser repaints. `useLayoutEffect` is used for operations that require immediate DOM updates, such as measuring layout or synchronizing animations."
        ]
    },
    {
        "id": 129,
        "topicId": 1,
        "questionId": 129,
        "question": "What are render props?",
        "answer": [
            "Render props are a technique for sharing code between React components using a prop whose value is a function. This function returns a React element, allowing the parent component to control how its child components are rendered. Render props are used for code reuse and logic abstraction."
        ]
    },
    {
        "id": 130,
        "topicId": 1,
        "questionId": 130,
        "question": "What is the `useHistory` hook in React Router?",
        "answer": [
            "`useHistory` is a hook in React Router that provides access to the history object. It allows you to navigate programmatically, go back, or go forward in the browser history. It is commonly used for navigation within functional components."
        ]
    },
    {
        "id": 131,
        "topicId": 1,
        "questionId": 131,
        "question": "What is `ReactDOM.createPortal` used for?",
        "answer": [
            "`ReactDOM.createPortal` is used to render children into a different part of the DOM tree outside the parent component's hierarchy. For example, you can use it to render a modal at the end of the body element.",
            "```js",
            "import ReactDOM from 'react-dom';",
            "import React from 'react';",
            "const Modal = ({ children }) => {",
            "  return ReactDOM.createPortal(",
            "    <div className='modal'>{children}</div>,",
            "    document.body",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 132,
        "topicId": 1,
        "questionId": 132,
        "question": "How can you optimize performance in a React application?",
        "answer": [
            "Performance in React applications can be optimized by using techniques like memoization with `React.memo` and `useMemo`. Here is an example of `React.memo`:",
            "```js",
            "import React from 'react';",
            "const ExpensiveComponent = React.memo(({ data }) => {",
            "  // Component rendering logic",
            "  return <div>{data}</div>;",
            "});",
            "```",
            "You can also use `React.lazy` and `React.Suspense` for code splitting:",
            "```js",
            "import React, { Suspense, lazy } from 'react';",
            "const LazyComponent = lazy(() => import('./LazyComponent'));",
            "const App = () => (",
            "  <Suspense fallback={<div>Loading...</div>>",
            "    <LazyComponent />",
            "  </Suspense>",
            ");",
            "```"
        ]
    },
    {
        "id": 133,
        "topicId": 1,
        "questionId": 133,
        "question": "What are fragments in React?",
        "answer": [
            "Fragments in React are used to group multiple elements without adding extra nodes to the DOM. They are created using `<React.Fragment>` or the shorthand syntax `<> ... </>`. Example:",
            "```js",
            "import React from 'react';",
            "const FragmentExample = () => (",
            "  <>",
            "    <h1>Hello</h1>",
            "    <p>This is a fragment example</p>",
            "  </>",
            ");",
            "```"
        ]
    },
    {
        "id": 134,
        "topicId": 1,
        "questionId": 134,
        "question": "What is `React.StrictMode`?",
        "answer": [
            "`React.StrictMode` is a wrapper component used to enable additional checks and warnings for its descendants. Example:",
            "```js",
            "import React from 'react';",
            "import ReactDOM from 'react-dom';",
            "import App from './App';",
            "ReactDOM.render(",
            "  <React.StrictMode>",
            "    <App />",
            "  </React.StrictMode>,",
            "  document.getElementById('root')",
            ");",
            "```"
        ]
    },
    {
        "id": 135,
        "topicId": 1,
        "questionId": 135,
        "question": "How do you handle asynchronous operations in React?",
        "answer": [
            "Asynchronous operations in React can be handled using `async`/`await` within `useEffect`. Example:",
            "```js",
            "import React, { useState, useEffect } from 'react';",
            "const FetchData = () => {",
            "  const [data, setData] = useState(null);",
            "  useEffect(() => {",
            "    const fetchData = async () => {",
            "      const response = await fetch('https://api.example.com/data');",
            "      const result = await response.json();",
            "      setData(result);",
            "    };",
            "    fetchData();",
            "  }, []);",
            "  return <div>{data ? data : 'Loading...'}</div>;",
            "};",
            "```"
        ]
    },
    {
        "id": 136,
        "topicId": 1,
        "questionId": 136,
        "question": "What is the `useRef` hook and how is it different from `useState`?",
        "answer": [
            "`useRef` is a hook that returns a mutable ref object whose `.current` property is initialized to the passed argument. Unlike `useState`, `useRef` does not trigger re-renders. Example:",
            "```js",
            "import React, { useRef } from 'react';",
            "const InputFocus = () => {",
            "  const inputRef = useRef(null);",
            "  const focusInput = () => {",
            "    inputRef.current.focus();",
            "  };",
            "  return (",
            "    <>",
            "      <input ref={inputRef} />",
            "      <button onClick={focusInput}>Focus Input</button>",
            "    </>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 137,
        "topicId": 1,
        "questionId": 137,
        "question": "What is the purpose of `React.memo`?",
        "answer": [
            "`React.memo` is used to prevent unnecessary re-renders of a functional component by memoizing it. Example:",
            "```js",
            "import React from 'react';",
            "const ExpensiveComponent = React.memo(({ data }) => {",
            "  console.log('Rendering ExpensiveComponent');",
            "  return <div>{data}</div>;",
            "});",
            "const ParentComponent = () => {",
            "  const [count, setCount] = React.useState(0);",
            "  return (",
            "    <>",
            "      <button onClick={() => setCount(count + 1)}>Increment</button>",
            "      <ExpensiveComponent data='Some data' />",
            "    </>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 138,
        "topicId": 1,
        "questionId": 138,
        "question": "How do you handle conditional rendering in React?",
        "answer": [
            "Conditional rendering can be handled using JavaScript operators. Example using the ternary operator:",
            "```js",
            "import React from 'react';",
            "const ConditionalRendering = ({ isLoggedIn }) => (",
            "  <div>",
            "    {isLoggedIn ? <p>Welcome back!</p> : <p>Please log in.</p>}",
            "  </div>",
            ");",
            "```"
        ]
    },
    {
        "id": 139,
        "topicId": 1,
        "questionId": 139,
        "question": "What are compound components?",
        "answer": [
            "Compound components are a pattern where multiple components work together to manage shared state and behavior. Example:",
            "```js",
            "import React, { createContext, useContext, useState } from 'react';",
            "const TabContext = createContext();",
            "const Tabs = ({ children }) => {",
            "  const [activeTab, setActiveTab] = useState('tab1');",
            "  return (",
            "    <TabContext.Provider value={{ activeTab, setActiveTab }}>",
            "      {children}",
            "    </TabContext.Provider>",
            "  );",
            "};",
            "const Tab = ({ id, children }) => {",
            "  const { activeTab, setActiveTab } = useContext(TabContext);",
            "  return (",
            "    <div onClick={() => setActiveTab(id)}>{children}</div>",
            "  );",
            "};",
            "const TabContent = ({ id, children }) => {",
            "  const { activeTab } = useContext(TabContext);",
            "  return activeTab === id ? <div>{children}</div> : null;",
            "};",
            "const App = () => (",
            "  <Tabs>",
            "    <Tab id='tab1'>Tab 1</Tab>",
            "    <Tab id='tab2'>Tab 2</Tab>",
            "    <TabContent id='tab1'>Content for Tab 1</TabContent>",
            "    <TabContent id='tab2'>Content for Tab 2</TabContent>",
            "  </Tabs>",
            ");",
            "```"
        ]
    },
    {
        "id": 140,
        "topicId": 1,
        "questionId": 140,
        "question": "What is the `context` API in React?",
        "answer": [
            "The `context` API is used for global state management. Example:",
            "```js",
            "import React, { createContext, useContext, useState } from 'react';",
            "const ThemeContext = createContext();",
            "const ThemeProvider = ({ children }) => {",
            "  const [theme, setTheme] = useState('light');",
            "  return (",
            "    <ThemeContext.Provider value={{ theme, setTheme }}>",
            "      {children}",
            "    </ThemeContext.Provider>",
            "  );",
            "};",
            "const ThemedComponent = () => {",
            "  const { theme, setTheme } = useContext(ThemeContext);",
            "  return (",
            "    <div style={{ background: theme === 'dark' ? '#333' : '#fff' }}>",
            "      <button onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}>",
            "        Toggle Theme",
            "      </button>",
            "    </div>",
            "  );",
            "};",
            "const App = () => (",
            "  <ThemeProvider>",
            "    <ThemedComponent />",
            "  </ThemeProvider>",
            ");",
            "```"
        ]
    },
    {
        "id": 141,
        "topicId": 1,
        "questionId": 141,
        "question": "What is the `useReducer` hook and when would you use it?",
        "answer": [
            "`useReducer` is a hook for managing complex state logic. Example:",
            "```js",
            "import React, { useReducer } from 'react';",
            "const reducer = (state, action) => {",
            "  switch (action.type) {",
            "    case 'INCREMENT':",
            "      return { count: state.count + 1 };",
            "    case 'DECREMENT':",
            "      return { count: state.count - 1 };",
            "    default:",
            "      return state;",
            "  }",
            "};",
            "const Counter = () => {",
            "  const [state, dispatch] = useReducer(reducer, { count: 0 });",
            "  return (",
            "    <div>",
            "      <p>Count: {state.count}</p>",
            "      <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>",
            "      <button onClick={() => dispatch({ type: 'DECREMENT' })}>Decrement</button>",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 142,
        "topicId": 1,
        "questionId": 142,
        "question": "How do you handle form validation in React?",
        "answer": [
            "Form validation can be handled using libraries like Formik. Example:",
            "```js",
            "import React from 'react';",
            "import { Formik, Field, Form, ErrorMessage } from 'formik';",
            "const validate = values => {",
            "  const errors = {};",
            "  if (!values.email) {",
            "    errors.email = 'Required';",
            "  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {",
            "    errors.email = 'Invalid email address';",
            "  }",
            "  return errors;",
            "};",
            "const MyForm = () => (",
            "  <Formik",
            "    initialValues={{ email: '' }}",
            "    validate={validate}",
            "    onSubmit={(values, { setSubmitting }) => {",
            "      setTimeout(() => {",
            "        alert(JSON.stringify(values, null, 2));",
            "        setSubmitting(false);",
            "      }, 400);",
            "    }}",
            "  >",
            "    <Form>",
            "      <label htmlFor='email'>Email</label>",
            "      <Field type='email' name='email' />",
            "      <ErrorMessage name='email' component='div' />",
            "      <button type='submit'>Submit</button>",
            "    </Form>",
            "  </Formik>",
            ");",
            "```"
        ]
    },
    {
        "id": 143,
        "topicId": 1,
        "questionId": 143,
        "question": "What is the difference between `useEffect` and `useLayoutEffect`?",
        "answer": [
            "`useEffect` runs after the DOM has been painted, while `useLayoutEffect` runs synchronously after DOM mutations but before the browser paints. Example:",
            "```js",
            "import React, { useEffect, useLayoutEffect, useRef } from 'react';",
            "const Example = () => {",
            "  const ref = useRef(null);",
            "  useLayoutEffect(() => {",
            "    console.log('useLayoutEffect:', ref.current.getBoundingClientRect());",
            "  }, []);",
            "  useEffect(() => {",
            "    console.log('useEffect:', ref.current.getBoundingClientRect());",
            "  }, []);",
            "  return <div ref={ref}>Hello</div>;",
            "};",
            "```"
        ]
    },
    {
        "id": 144,
        "topicId": 1,
        "questionId": 144,
        "question": "What is the `useContext` hook used for in React?",
        "answer": [
            "`useContext` is a hook that allows functional components to access context values provided by `Context.Provider`. Example:",
            "```js",
            "import React, { createContext, useContext } from 'react';",
            "const UserContext = createContext();",
            "const UserProfile = () => {",
            "  const user = useContext(UserContext);",
            "  return <div>{user.name}</div>;",
            "};",
            "const App = () => (",
            "  <UserContext.Provider value={{ name: 'John Doe' }}>",
            "    <UserProfile />",
            "  </UserContext.Provider>",
            ");",
            "```"
        ]
    },
    {
        "id": 145,
        "topicId": 1,
        "questionId": 145,
        "question": "What is the `useImperativeHandle` hook?",
        "answer": [
            "`useImperativeHandle` customizes the instance value exposed to parent components when using refs. Example:",
            "```js",
            "import React, { forwardRef, useImperativeHandle, useRef } from 'react';",
            "const CustomInput = forwardRef((props, ref) => {",
            "  const inputRef = useRef(null);",
            "  useImperativeHandle(ref, () => ({",
            "    focus: () => inputRef.current.focus(),",
            "  }));",
            "  return <input ref={inputRef} />;",
            "});",
            "const Parent = () => {",
            "  const inputRef = useRef(null);",
            "  return (",
            "    <>",
            "      <CustomInput ref={inputRef} />",
            "      <button onClick={() => inputRef.current.focus()}>Focus Input</button>",
            "    </>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 146,
        "topicId": 1,
        "questionId": 146,
        "question": "What is `React.StrictMode` and how does it help with development?",
        "answer": [
            "`React.StrictMode` is a development mode feature that helps identify potential problems by enabling additional checks and warnings. Example:",
            "```js",
            "import React from 'react';",
            "import ReactDOM from 'react-dom';",
            "import App from './App';",
            "ReactDOM.render(",
            "  <React.StrictMode>",
            "    <App />",
            "  </React.StrictMode>,",
            "  document.getElementById('root')",
            ");",
            "```"
        ]
    },
    {
        "id": 147,
        "topicId": 1,
        "questionId": 147,
        "question": "What are `render props` in React?",
        "answer": [
            "`Render props` is a pattern where a component uses a function as a prop to control what to render. Example:",
            "```js",
            "import React from 'react';",
            "const DataProvider = ({ render }) => {",
            "  const data = 'Some data';",
            "  return render(data);",
            "};",
            "const App = () => (",
            "  <DataProvider render={(data) => <div>{data}</div>} />",
            ");",
            "```"
        ]
    },
    {
        "id": 148,
        "topicId": 1,
        "questionId": 148,
        "question": "What are `Portals` in React?",
        "answer": [
            "`Portals` allow rendering children into a DOM node outside the parent component’s DOM hierarchy. Example:",
            "```js",
            "import ReactDOM from 'react-dom';",
            "import React from 'react';",
            "const Modal = ({ children }) => {",
            "  return ReactDOM.createPortal(",
            "    <div className='modal'>{children}</div>,",
            "    document.body",
            "  );",
            "};",
            "const App = () => (",
            "  <Modal>My Modal Content</Modal>",
            ");",
            "```"
        ]
    },
    {
        "id": 149,
        "topicId": 1,
        "questionId": 149,
        "question": "How do you use `React.lazy` and `Suspense` for code splitting?",
        "answer": [
            "`React.lazy` and `Suspense` are used to load components lazily and display a fallback UI until the component is loaded. Example:",
            "```js",
            "import React, { Suspense, lazy } from 'react';",
            "const LazyComponent = lazy(() => import('./LazyComponent'));",
            "const App = () => (",
            "  <Suspense fallback={<div>Loading...</div>>",
            "    <LazyComponent />",
            "  </Suspense>",
            ");",
            "```"
        ]
    },
    {
        "id": 150,
        "topicId": 1,
        "questionId": 150,
        "question": "How can you use `useCallback` to optimize performance?",
        "answer": [
            "`useCallback` memoizes a callback function to avoid re-creation on every render. Example:",
            "```js",
            "import React, { useState, useCallback } from 'react';",
            "const App = () => {",
            "  const [count, setCount] = useState(0);",
            "  const handleClick = useCallback(() => {",
            "    console.log('Clicked');",
            "  }, []);",
            "  return (",
            "    <div>",
            "      <button onClick={handleClick}>Click me</button>",
            "      <p>Count: {count}</p>",
            "      <button onClick={() => setCount(count + 1)}>Increment</button>",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 151,
        "topicId": 1,
        "questionId": 151,
        "question": "What is the purpose of `useEffect` cleanup function?",
        "answer": [
            "The cleanup function in `useEffect` is used to clean up side effects such as subscriptions or timers. Example:",
            "```js",
            "import React, { useEffect, useState } from 'react';",
            "const Timer = () => {",
            "  const [time, setTime] = useState(new Date().toLocaleTimeString());",
            "  useEffect(() => {",
            "    const timer = setInterval(() => {",
            "      setTime(new Date().toLocaleTimeString());",
            "    }, 1000);",
            "    return () => clearInterval(timer);",
            "  }, []);",
            "  return <div>Current time: {time}</div>;",
            "};",
            "```"
        ]
    },
    {
        "id": 152,
        "topicId": 1,
        "questionId": 152,
        "question": "How do you handle errors in a React application?",
        "answer": [
            "Errors in React applications can be handled using error boundaries. Example:",
            "```js",
            "import React from 'react';",
            "class ErrorBoundary extends React.Component {",
            "  constructor(props) {",
            "    super(props);",
            "    this.state = { hasError: false };",
            "  }",
            "  static getDerivedStateFromError() {",
            "    return { hasError: true };",
            "  }",
            "  componentDidCatch(error, info) {",
            "    console.error(error, info);",
            "  }",
            "  render() {",
            "    if (this.state.hasError) {",
            "      return <h1>Something went wrong.</h1>;",
            "    }",
            "    return this.props.children;",
            "  }",
            "};",
            "const App = () => (",
            "  <ErrorBoundary>",
            "    <ComponentThatMayThrow />",
            "  </ErrorBoundary>",
            ");",
            "```"
        ]
    },
    {
        "id": 153,
        "topicId": 1,
        "questionId": 153,
        "question": "How do you pass data from a parent component to a child component?",
        "answer": [
            "Data is passed from a parent component to a child component through props. Example:",
            "```js",
            "import React from 'react';",
            "const ChildComponent = ({ message }) => <div>{message}</div>;",
            "const ParentComponent = () => {",
            "  return <ChildComponent message='Hello from parent!' />;",
            "};",
            "```"
        ]
    },
    {
        "id": 154,
        "topicId": 1,
        "questionId": 154,
        "question": "How do you handle state management in a React application?",
        "answer": [
            "State management can be handled using React's built-in state management via `useState` or `useReducer`, or using external libraries like Redux or Context API. Example using `useState`:",
            "```js",
            "import React, { useState } from 'react';",
            "const App = () => {",
            "  const [count, setCount] = useState(0);",
            "  return (",
            "    <div>",
            "      <p>Count: {count}</p>",
            "      <button onClick={() => setCount(count + 1)}>Increment</button>",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 155,
        "topicId": 1,
        "questionId": 155,
        "question": "What is `useReducer` and when should you use it over `useState`?",
        "answer": [
            "`useReducer` is used for managing more complex state logic compared to `useState`. Example:",
            "```js",
            "import React, { useReducer } from 'react';",
            "const reducer = (state, action) => {",
            "  switch (action.type) {",
            "    case 'INCREMENT':",
            "      return { count: state.count + 1 };",
            "    case 'DECREMENT':",
            "      return { count: state.count - 1 };",
            "    default:",
            "      return state;",
            "  }",
            "};",
            "const Counter = () => {",
            "  const [state, dispatch] = useReducer(reducer, { count: 0 });",
            "  return (",
            "    <div>",
            "      <p>Count: {state.count}</p>",
            "      <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>",
            "      <button onClick={() => dispatch({ type: 'DECREMENT' })}>Decrement</button>",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 156,
        "topicId": 1,
        "questionId": 156,
        "question": "How do you optimize rendering performance in React?",
        "answer": [
            "Rendering performance can be optimized using techniques like `React.memo`, `useMemo`, and `useCallback`. Example:",
            "```js",
            "import React, { useCallback, useMemo, useState } from 'react';",
            "const ExpensiveComponent = React.memo(({ data }) => {",
            "  console.log('Rendering ExpensiveComponent');",
            "  return <div>{data}</div>;",
            "});",
            "const App = () => {",
            "  const [count, setCount] = useState(0);",
            "  const data = useMemo(() => 'Some data', []);",
            "  const handleClick = useCallback(() => {",
            "    console.log('Clicked');",
            "  }, []);",
            "  return (",
            "    <div>",
            "      <button onClick={handleClick}>Click me</button>",
            "      <p>Count: {count}</p>",
            "      <button onClick={() => setCount(count + 1)}>Increment</button>",
            "      <ExpensiveComponent data={data} />",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 157,
        "topicId": 1,
        "questionId": 157,
        "question": "What are `key` props in React and why are they important?",
        "answer": [
            "`key` props are used to identify which items in a list have changed, been added, or removed. They help React optimize rendering performance. Example:",
            "```js",
            "import React from 'react';",
            "const List = ({ items }) => (",
            "  <ul>",
            "    {items.map(item => <li key={item.id}>{item.text}</li>)}",
            "  </ul>",
            ");",
            "```"
        ]
    },
    {
        "id": 158,
        "topicId": 1,
        "questionId": 158,
        "question": "How do you manage side effects in a React application?",
        "answer": [
            "Side effects are managed using the `useEffect` hook. Example:",
            "```js",
            "import React, { useEffect, useState } from 'react';",
            "const DataFetcher = () => {",
            "  const [data, setData] = useState(null);",
            "  useEffect(() => {",
            "    fetch('https://api.example.com/data')",
            "      .then(response => response.json())",
            "      .then(data => setData(data));",
            "  }, []);",
            "  return <div>{data ? data.message : 'Loading...'}</div>;",
            "};",
            "```"
        ]
    },
    {
        "id": 159,
        "topicId": 1,
        "questionId": 159,
        "question": "What is the `useRef` hook and how is it used?",
        "answer": [
            "The `useRef` hook is used to persist values across renders and access DOM elements directly. Example:",
            "```js",
            "import React, { useRef } from 'react';",
            "const FocusInput = () => {",
            "  const inputRef = useRef(null);",
            "  const handleClick = () => {",
            "    inputRef.current.focus();",
            "  };",
            "  return (",
            "    <div>",
            "      <input ref={inputRef} type='text' />",
            "      <button onClick={handleClick}>Focus Input</button>",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 160,
        "topicId": 1,
        "questionId": 160,
        "question": "How do you handle conditional rendering in React?",
        "answer": [
            "Conditional rendering in React can be done using JavaScript conditional operators. Example:",
            "```js",
            "import React, { useState } from 'react';",
            "const ConditionalRendering = () => {",
            "  const [isLoggedIn, setIsLoggedIn] = useState(false);",
            "  return (",
            "    <div>",
            "      {isLoggedIn ? (",
            "        <p>Welcome back!</p>",
            "      ) : (",
            "        <button onClick={() => setIsLoggedIn(true)}>Log In</button>",
            "      )}",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 161,
        "topicId": 1,
        "questionId": 161,
        "question": "How do you create a custom hook in React?",
        "answer": [
            "Custom hooks are functions that use React hooks to encapsulate reusable logic. Example:",
            "```js",
            "import { useState, useEffect } from 'react';",
            "const useWindowWidth = () => {",
            "  const [width, setWidth] = useState(window.innerWidth);",
            "  useEffect(() => {",
            "    const handleResize = () => setWidth(window.innerWidth);",
            "    window.addEventListener('resize', handleResize);",
            "    return () => window.removeEventListener('resize', handleResize);",
            "  }, []);",
            "  return width;",
            "};",
            "const DisplayWidth = () => {",
            "  const width = useWindowWidth();",
            "  return <div>Window width: {width}px</div>;",
            "};",
            "```"
        ]
    },
    {
        "id": 162,
        "topicId": 1,
        "questionId": 163,
        "question": "How can you use context to manage global state in a React application?",
        "answer": [
            "React Context API allows you to pass data through the component tree without prop drilling. Example:",
            "```js",
            "import React, { createContext, useContext, useState } from 'react';",
            "const ThemeContext = createContext();",
            "const ThemeProvider = ({ children }) => {",
            "  const [theme, setTheme] = useState('light');",
            "  return (",
            "    <ThemeContext.Provider value={{ theme, setTheme }}>",
            "      {children}",
            "    </ThemeContext.Provider>",
            "  );",
            "};",
            "const ThemedComponent = () => {",
            "  const { theme, setTheme } = useContext(ThemeContext);",
            "  return (",
            "    <div style={{ background: theme === 'dark' ? '#333' : '#fff' }}>",
            "      <button onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}>",
            "        Toggle Theme",
            "      </button>",
            "    </div>",
            "  );",
            "};",
            "const App = () => (",
            "  <ThemeProvider>",
            "    <ThemedComponent />",
            "  </ThemeProvider>",
            ");",
            "```"
        ]
    },
    {
        "id": 163,
        "topicId": 1,
        "questionId": 163,
        "question": "How do you handle async operations in `useEffect`?",
        "answer": [
            "Async operations inside `useEffect` need to be handled with an inner async function. Example:",
            "```js",
            "import React, { useState, useEffect } from 'react';",
            "const DataFetcher = () => {",
            "  const [data, setData] = useState(null);",
            "  useEffect(() => {",
            "    const fetchData = async () => {",
            "      const response = await fetch('https://api.example.com/data');",
            "      const result = await response.json();",
            "      setData(result);",
            "    };",
            "    fetchData();",
            "  }, []);",
            "  return <div>{data ? data.message : 'Loading...'}</div>;",
            "};",
            "```"
        ]
    },   
    {
        "id": 164,
        "topicId": 1,
        "questionId": 164,
        "question": "What is `React.memo` and how is it used?",
        "answer": [
            "`React.memo` is a higher-order component that memoizes a component to prevent unnecessary re-renders. Example:",
            "```js",
            "import React, { memo } from 'react';",
            "const ExpensiveComponent = memo(({ data }) => {",
            "  console.log('Rendering ExpensiveComponent');",
            "  return <div>{data}</div>;",
            "});",
            "const App = () => {",
            "  const [count, setCount] = useState(0);",
            "  return (",
            "    <div>",
            "      <button onClick={() => setCount(count + 1)}>Increment</button>",
            "      <ExpensiveComponent data='Some data' />",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 165,
        "topicId": 1,
        "questionId": 165,
        "question": "How do you manage forms in React?",
        "answer": [
            "Forms in React are managed using controlled components where form data is handled by the component's state. Example:",
            "```js",
            "import React, { useState } from 'react';",
            "const FormExample = () => {",
            "  const [inputValue, setInputValue] = useState('');",
            "  const handleChange = (e) => {",
            "    setInputValue(e.target.value);",
            "  };",
            "  const handleSubmit = (e) => {",
            "    e.preventDefault();",
            "    console.log('Form submitted with value:', inputValue);",
            "  };",
            "  return (",
            "    <form onSubmit={handleSubmit}>",
            "      <input type='text' value={inputValue} onChange={handleChange} />",
            "      <button type='submit'>Submit</button>",
            "    </form>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 166,
        "topicId": 1,
        "questionId": 166,
        "question": "How do you perform lazy loading of components in React?",
        "answer": [
            "Lazy loading of components can be done using `React.lazy` and `Suspense`. Example:",
            "```js",
            "import React, { Suspense, lazy } from 'react';",
            "const LazyComponent = lazy(() => import('./LazyComponent'));",
            "const App = () => (",
            "  <div>",
            "    <Suspense fallback={<div>Loading...</div>}>",
            "      <LazyComponent />",
            "    </Suspense>",
            "  </div>",
            ");",
            "```"
        ]
    },
    {
        "id": 167,
        "topicId": 1,
        "questionId": 167,
        "question": "What is the purpose of `useMemo` hook?",
        "answer": [
            "The `useMemo` hook memoizes the result of a computation to optimize performance by avoiding expensive calculations on every render. Example:",
            "```js",
            "import React, { useMemo, useState } from 'react';",
            "const ExpensiveComponent = ({ num }) => {",
            "  const computeExpensiveValue = (n) => {",
            "    let result = 0;",
            "    for (let i = 0; i < 1e6; i++) result += i * n;",
            "    return result;",
            "  };",
            "  const expensiveValue = useMemo(() => computeExpensiveValue(num), [num]);",
            "  return <div>Computed Value: {expensiveValue}</div>;",
            "};",
            "const App = () => {",
            "  const [num, setNum] = useState(1);",
            "  return (",
            "    <div>",
            "      <button onClick={() => setNum(num + 1)}>Increase Number</button>",
            "      <ExpensiveComponent num={num} />",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 168,
        "topicId": 1,
        "questionId": 168,
        "question": "How do you handle controlled and uncontrolled components in React?",
        "answer": [
            "Controlled components have their state controlled by React, while uncontrolled components manage their own state. Example:",
            "```js",
            "import React, { useState, useRef } from 'react';",
            "const ControlledComponent = () => {",
            "  const [value, setValue] = useState('');",
            "  const handleChange = (e) => {",
            "    setValue(e.target.value);",
            "  };",
            "  return <input type='text' value={value} onChange={handleChange} />;",
            "};",
            "const UncontrolledComponent = () => {",
            "  const inputRef = useRef(null);",
            "  const handleSubmit = (e) => {",
            "    e.preventDefault();",
            "    alert('A name was submitted: ' + inputRef.current.value);",
            "  };",
            "  return (",
            "    <form onSubmit={handleSubmit}>",
            "      <input type='text' ref={inputRef} />",
            "      <button type='submit'>Submit</button>",
            "    </form>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 169,
        "topicId": 1,
        "questionId": 169,
        "question": "How do you handle error boundaries in React?",
        "answer": [
            "Error boundaries are used to catch JavaScript errors anywhere in the component tree. Example:",
            "```js",
            "import React, { Component } from 'react';",
            "class ErrorBoundary extends Component {",
            "  constructor(props) {",
            "    super(props);",
            "    this.state = { hasError: false };",
            "  }",
            "  static getDerivedStateFromError() {",
            "    return { hasError: true };",
            "  }",
            "  componentDidCatch(error, errorInfo) {",
            "    console.error('Error caught by ErrorBoundary:', error, errorInfo);",
            "  }",
            "  render() {",
            "    if (this.state.hasError) {",
            "      return <h1>Something went wrong.</h1>;",
            "    }",
            "    return this.props.children;",
            "  }",
            "};",
            "```"
        ]
    },
    {
        "id": 170,
        "topicId": 1,
        "questionId": 170,
        "question": "How do you optimize performance in a React application?",
        "answer": [
            "Performance can be optimized by memoizing components, avoiding unnecessary re-renders, and using React's built-in performance tools. Example:",
            "```js",
            "import React, { memo } from 'react';",
            "const OptimizedComponent = memo(({ data }) => {",
            "  console.log('Rendering OptimizedComponent');",
            "  return <div>{data}</div>;",
            "});",
            "const App = () => {",
            "  const [count, setCount] = useState(0);",
            "  return (",
            "    <div>",
            "      <button onClick={() => setCount(count + 1)}>Increment</button>",
            "      <OptimizedComponent data='Some data' />",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 171,
        "topicId": 1,
        "questionId": 171,
        "question": "What are React hooks and why are they used?",
        "answer": [
            "React hooks are functions that let you use state and other React features without writing a class. Example:",
            "```js",
            "import React, { useState } from 'react';",
            "const Counter = () => {",
            "  const [count, setCount] = useState(0);",
            "  return (",
            "    <div>",
            "      <p>Count: {count}</p>",
            "      <button onClick={() => setCount(count + 1)}>Increment</button>",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 172,
        "topicId": 1,
        "questionId": 172,
        "question": "How do you use the `useReducer` hook in React?",
        "answer": [
            "The `useReducer` hook is used for managing complex state logic in components. Example:",
            "```js",
            "import React, { useReducer } from 'react';",
            "const initialState = { count: 0 };",
            "const reducer = (state, action) => {",
            "  switch (action.type) {",
            "    case 'increment':",
            "      return { count: state.count + 1 };",
            "    case 'decrement':",
            "      return { count: state.count - 1 };",
            "    default:",
            "      return state;",
            "  }",
            "};",
            "const Counter = () => {",
            "  const [state, dispatch] = useReducer(reducer, initialState);",
            "  return (",
            "    <div>",
            "      <p>Count: {state.count}</p>",
            "      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>",
            "      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 173,
        "topicId": 1,
        "questionId": 173,
        "question": "How do you use `useCallback` to optimize performance?",
        "answer": [
            "The `useCallback` hook memoizes callback functions to prevent unnecessary re-renders. Example:",
            "```js",
            "import React, { useCallback, useState } from 'react';",
            "const CallbackExample = () => {",
            "  const [count, setCount] = useState(0);",
            "  const handleClick = useCallback(() => {",
            "    console.log('Button clicked!');",
            "  }, []);",
            "  return (",
            "    <div>",
            "      <p>Count: {count}</p>",
            "      <button onClick={handleClick}>Click me</button>",
            "      <button onClick={() => setCount(count + 1)}>Increment</button>",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    },
    {
        "id": 174,
        "topicId": 1,
        "questionId": 174,
        "question": "What is the `useImperativeHandle` hook used for?",
        "answer": [
            "The `useImperativeHandle` hook allows you to customize the instance value that is exposed when using `ref`. Example:",
            "```js",
            "import React, { forwardRef, useImperativeHandle, useRef } from 'react';",
            "const CustomInput = forwardRef((props, ref) => {",
            "  const inputRef = useRef(null);",
            "  useImperativeHandle(ref, () => ({",
            "    focus: () => {",
            "      inputRef.current.focus();",
            "    },",
            "  }));",
            "  return <input ref={inputRef} type='text' />;",
            "});",
            "const ParentComponent = () => {",
            "  const inputRef = useRef(null);",
            "  const handleClick = () => {",
            "    inputRef.current.focus();",
            "  };",
            "  return (",
            "    <div>",
            "      <CustomInput ref={inputRef} />",
            "      <button onClick={handleClick}>Focus Input</button>",
            "    </div>",
            "  );",
            "};",
            "```"
        ]
    }
    
    
]