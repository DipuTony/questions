[
    {
        "id": 1,
        "topicId": 2,
        "questionId": 1,
        "question": "What is JavaScript?",
        "answer": [
            "JavaScript is a programming language used to create interactive effects within web browsers."
        ]
    },
    {
        "id": 2,
        "topicId": 2,
        "questionId": 2,
        "question": "What is a variable in JavaScript?",
        "answer": [
            "A variable is a named container for storing data values.",
            "```javascript",
            "let name = 'John';",
            "```"
        ]
    },
    {
        "id": 3,
        "topicId": 2,
        "questionId": 3,
        "question": "What are the different data types in JavaScript?",
        "answer": [
            "JavaScript data types include string, number, boolean, object, and undefined.",
            "```javascript",
            "let name = 'John';",
            "let age = 30;",
            "let isStudent = false;",
            "let person = { firstName: 'John', lastName: 'Doe' };",
            "let undefinedValue;",
            "```"
        ]
    },
    {
        "id": 4,
        "topicId": 2,
        "questionId": 4,
        "question": "What is a function in JavaScript?",
        "answer": [
            "A function is a block of code designed to perform a particular task.",
            "```javascript",
            "function greet(name) {",
            "  return `Hello, ${name}`;",
            "}",
            "```"
        ]
    },
    {
        "id": 5,
        "topicId": 2,
        "questionId": 5,
        "question": "What is an arrow function?",
        "answer": [
            "An arrow function is a shorter syntax for writing functions in JavaScript.",
            "```javascript",
            "const add = (a, b) => a + b;",
            "```"
        ]
    },
    {
        "id": 6,
        "topicId": 2,
        "questionId": 6,
        "question": "What is an array in JavaScript?",
        "answer": [
            "An array is a special variable that can hold more than one value.",
            "```javascript",
            "let fruits = ['Apple', 'Banana', 'Cherry'];",
            "```"
        ]
    },
    {
        "id": 7,
        "topicId": 2,
        "questionId": 7,
        "question": "What is an object in JavaScript?",
        "answer": [
            "An object is a collection of properties, and a property is an association between a name and a value.",
            "```javascript",
            "let car = {",
            "  make: 'Toyota',",
            "  model: 'Camry',",
            "  year: 2021",
            "};",
            "```"
        ]
    },
    {
        "id": 8,
        "topicId": 2,
        "questionId": 8,
        "question": "What is a promise in JavaScript?",
        "answer": [
            "A promise is an object representing the eventual completion or failure of an asynchronous operation.",
            "```javascript",
            "let promise = new Promise((resolve, reject) => {",
            "  // asynchronous operation",
            "});",
            "```"
        ]
    },
    {
        "id": 9,
        "topicId": 2,
        "questionId": 9,
        "question": "What is async/await in JavaScript?",
        "answer": [
            "Async/await is a way to handle asynchronous code with a more synchronous syntax.",
            "```javascript",
            "async function fetchData() {",
            "  let response = await fetch('https://api.example.com/data');",
            "  let data = await response.json();",
            "  console.log(data);",
            "}",
            "```"
        ]
    },
    {
        "id": 10,
        "topicId": 2,
        "questionId": 10,
        "question": "What is the DOM?",
        "answer": [
            "The DOM (Document Object Model) is a programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style, and content.",
            "```html",
            "<!DOCTYPE html>",
            "<html>",
            "<body>",
            "  <h1 id='title'>Hello, World!</h1>",
            "  <script>",
            "    document.getElementById('title').innerText = 'Hello, JavaScript!';",
            "  </script>",
            "</body>",
            "</html>",
            "```"
        ]
    },
    {
        "id": 11,
        "topicId": 2,
        "questionId": 11,
        "question": "What is a closure in JavaScript?",
        "answer": [
            "A closure is a function that retains access to its lexical scope, even when the function is executed outside that scope. Example:",
            "```js",
            "function makeCounter() {",
            "  let count = 0;",
            "  return function() {",
            "    count++;",
            "    return count;",
            "  };",
            "}",
            "const counter = makeCounter();",
            "console.log(counter()); // 1",
            "console.log(counter()); // 2",
            "```"
        ]
    },
    {
        "id": 12,
        "topicId": 2,
        "questionId": 12,
        "question": "What is the difference between `let`, `const`, and `var`?",
        "answer": [
            "`let` and `const` are block-scoped variables, whereas `var` is function-scoped. `const` is used for constants and cannot be reassigned. Example:",
            "```js",
            "if (true) {",
            "  let x = 10;",
            "  const y = 20;",
            "  var z = 30;",
            "  console.log(x); // 10",
            "  console.log(y); // 20",
            "  console.log(z); // 30",
            "}",
            "console.log(x); // ReferenceError: x is not defined",
            "console.log(y); // ReferenceError: y is not defined",
            "console.log(z); // 30",
            "```"
        ]
    },
    {
        "id": 13,
        "topicId": 2,
        "questionId": 13,
        "question": "How do you handle asynchronous code in JavaScript?",
        "answer": [
            "Asynchronous code can be handled using callbacks, promises, or async/await. Example with async/await:",
            "```js",
            "async function fetchData() {",
            "  const response = await fetch('https://api.example.com/data');",
            "  const data = await response.json();",
            "  console.log(data);",
            "}",
            "fetchData();",
            "```"
        ]
    },
    {
        "id": 14,
        "topicId": 2,
        "questionId": 14,
        "question": "What is the `this` keyword in JavaScript?",
        "answer": [
            "The `this` keyword refers to the context in which a function is executed. Example:",
            "```js",
            "const person = {",
            "  name: 'Alice',",
            "  greet() {",
            "    console.log('Hello, ' + this.name);",
            "  }",
            "};",
            "person.greet(); // Hello, Alice",
            "```"
        ]
    },
    {
        "id": 15,
        "topicId": 2,
        "questionId": 15,
        "question": "What is the purpose of the `bind` method?",
        "answer": [
            "The `bind` method creates a new function that, when called, has its `this` keyword set to a specific value. Example:",
            "```js",
            "function greet() {",
            "  console.log('Hello, ' + this.name);",
            "}",
            "const person = { name: 'Bob' };",
            "const greetPerson = greet.bind(person);",
            "greetPerson(); // Hello, Bob",
            "```"
        ]
    },
    {
        "id": 16,
        "topicId": 2,
        "questionId": 16,
        "question": "What is event delegation?",
        "answer": [
            "Event delegation is a technique where a single event listener is added to a parent element to handle events for its child elements. Example:",
            "```js",
            "document.getElementById('parent').addEventListener('click', function(event) {",
            "  if (event.target.tagName === 'BUTTON') {",
            "    console.log('Button clicked:', event.target.textContent);",
            "  }",
            "});",
            "```"
        ]
    },
    {
        "id": 17,
        "topicId": 2,
        "questionId": 17,
        "question": "What is a promise in JavaScript?",
        "answer": [
            "A promise represents a value that may be available now, or in the future, or never. Example:",
            "```js",
            "const promise = new Promise((resolve, reject) => {",
            "  setTimeout(() => resolve('Data received'), 1000);",
            "});",
            "promise.then(result => console.log(result)); // Data received",
            "```"
        ]
    },
    {
        "id": 18,
        "topicId": 2,
        "questionId": 18,
        "question": "How do you create an object in JavaScript?",
        "answer": [
            "Objects can be created using object literals or the `new Object()` syntax. Example with object literal:",
            "```js",
            "const person = {",
            "  name: 'John',",
            "  age: 30",
            "};",
            "console.log(person.name); // John",
            "```"
        ]
    },
    {
        "id": 19,
        "topicId": 2,
        "questionId": 19,
        "question": "What is the `typeof` operator in JavaScript?",
        "answer": [
            "The `typeof` operator returns a string indicating the type of a variable. Example:",
            "```js",
            "console.log(typeof 'hello'); // string",
            "console.log(typeof 42); // number",
            "console.log(typeof true); // boolean",
            "```"
        ]
    },
    {
        "id": 20,
        "topicId": 2,
        "questionId": 20,
        "question": "What is the difference between `==` and `===` in JavaScript?",
        "answer": [
            "`==` performs type coercion before comparing values, while `===` compares both value and type without type coercion. Example:",
            "```js",
            "console.log(5 == '5'); // true",
            "console.log(5 === '5'); // false",
            "```"
        ]
    },
    {
        "id": 21,
        "topicId": 2,
        "questionId": 21,
        "question": "What is the difference between `null` and `undefined`?",
        "answer": [
            "`null` is an explicit assignment indicating no value, while `undefined` means a variable has been declared but not yet assigned a value. Example:",
            "```js",
            "let a = null;",
            "let b;",
            "console.log(a); // null",
            "console.log(b); // undefined",
            "```"
        ]
    },
    {
        "id": 22,
        "topicId": 2,
        "questionId": 22,
        "question": "What is the purpose of the `this` keyword in a class?",
        "answer": [
            "In a class, `this` refers to the instance of the class and is used to access properties and methods of the class. Example:",
            "```js",
            "class Person {",
            "  constructor(name) {",
            "    this.name = name;",
            "  }",
            "  greet() {",
            "    console.log('Hello, ' + this.name);",
            "  }",
            "}",
            "const person = new Person('Alice');",
            "person.greet(); // Hello, Alice",
            "```"
        ]
    },
    {
        "id": 23,
        "topicId": 2,
        "questionId": 23,
        "question": "What are arrow functions and how do they differ from regular functions?",
        "answer": [
            "Arrow functions have a shorter syntax and do not have their own `this` context. Example:",
            "```js",
            "const add = (a, b) => a + b;",
            "function addRegular(a, b) {",
            "  return a + b;",
            "}",
            "console.log(add(2, 3)); // 5",
            "console.log(addRegular(2, 3)); // 5",
            "```"
        ]
    },
    {
        "id": 24,
        "topicId": 2,
        "questionId": 24,
        "question": "How does the `map` method work on arrays?",
        "answer": [
            "The `map` method creates a new array with the results of calling a provided function on every element in the calling array. Example:",
            "```js",
            "const numbers = [1, 2, 3];",
            "const doubled = numbers.map(num => num * 2);",
            "console.log(doubled); // [2, 4, 6]",
            "```"
        ]
    },
    {
        "id": 25,
        "topicId": 2,
        "questionId": 25,
        "question": "What is destructuring in JavaScript?",
        "answer": [
            "Destructuring allows unpacking values from arrays or properties from objects into distinct variables. Example:",
            "```js",
            "const [a, b] = [1, 2];",
            "const {name, age} = {name: 'John', age: 30};",
            "console.log(a); // 1",
            "console.log(name); // John",
            "```"
        ]
    },
    {
        "id": 26,
        "topicId": 2,
        "questionId": 26,
        "question": "What is the `bind` method used for in JavaScript?",
        "answer": [
            "The `bind` method creates a new function that, when called, has its `this` keyword set to a specific value. Example:",
            "```js",
            "function greet() {",
            "  console.log('Hello, ' + this.name);",
            "}",
            "const person = { name: 'Bob' };",
            "const greetPerson = greet.bind(person);",
            "greetPerson(); // Hello, Bob",
            "```"
        ]
    },
    {
        "id": 27,
        "topicId": 2,
        "questionId": 27,
        "question": "What is a promise chain?",
        "answer": [
            "A promise chain is a sequence of `.then()` methods, where each `.then()` returns a new promise. Example:",
            "```js",
            "fetch('https://api.example.com/data')",
            "  .then(response => response.json())",
            "  .then(data => console.log(data))",
            "  .catch(error => console.error(error));",
            "```"
        ]
    },
    {
        "id": 28,
        "topicId": 2,
        "questionId": 28,
        "question": "What is the difference between `apply` and `call` methods in JavaScript?",
        "answer": [
            "Both `apply` and `call` methods are used to invoke functions with a specific `this` value. The difference is that `call` takes arguments separately, while `apply` takes arguments as an array. Example:",
            "```js",
            "function greet(greeting, punctuation) {",
            "  console.log(greeting + ', ' + this.name + punctuation);",
            "}",
            "const person = { name: 'Alice' };",
            "greet.call(person, 'Hello', '!'); // Hello, Alice!",
            "greet.apply(person, ['Hi', '.']); // Hi, Alice.",
            "```"
        ]
    },
    {
        "id": 29,
        "topicId": 2,
        "questionId": 29,
        "question": "How do you handle errors in asynchronous code?",
        "answer": [
            "Errors in asynchronous code can be handled using `.catch()` for promises or `try...catch` for async/await. Example with async/await:",
            "```js",
            "async function fetchData() {",
            "  try {",
            "    const response = await fetch('https://api.example.com/data');",
            "    const data = await response.json();",
            "    console.log(data);",
            "  } catch (error) {",
            "    console.error(error);",
            "  }",
            "}",
            "fetchData();",
            "```"
        ]
    },
    {
        "id": 30,
        "topicId": 2,
        "questionId": 30,
        "question": "What is the `spread` operator?",
        "answer": [
            "The `spread` operator allows expanding an iterable (like an array) into more elements. Example:",
            "```js",
            "const numbers = [1, 2, 3];",
            "const moreNumbers = [...numbers, 4, 5];",
            "console.log(moreNumbers); // [1, 2, 3, 4, 5]",
            "```"
        ]
    },
    {
        "id": 31,
        "topicId": 2,
        "questionId": 31,
        "question": "What is the `rest` parameter?",
        "answer": [
            "The `rest` parameter allows a function to accept an indefinite number of arguments as an array. Example:",
            "```js",
            "function sum(...numbers) {",
            "  return numbers.reduce((acc, curr) => acc + curr, 0);",
            "}",
            "console.log(sum(1, 2, 3)); // 6",
            "```"
        ]
    },
    {
        "id": 32,
        "topicId": 2,
        "questionId": 32,
        "question": "What is a JavaScript module?",
        "answer": [
            "A JavaScript module is a piece of code that is executed once it is loaded, and it can export and import values to and from other modules. Example:",
            "```js",
            "// module.js",
            "export const PI = 3.14;",
            "export function calculateCircumference(radius) {",
            "  return 2 * PI * radius;",
            "}",
            "// main.js",
            "import { PI, calculateCircumference } from './module.js';",
            "console.log(PI); // 3.14",
            "console.log(calculateCircumference(5)); // 31.400000000000002",
            "```"
        ]
    },
    {
        "id": 33,
        "topicId": 2,
        "questionId": 33,
        "question": "How do you debounce a function in JavaScript?",
        "answer": [
            "Debouncing ensures that a function is only executed after a specified delay. Example:",
            "```js",
            "function debounce(func, wait) {",
            "  let timeout;",
            "  return function(...args) {",
            "    clearTimeout(timeout);",
            "    timeout = setTimeout(() => func.apply(this, args), wait);",
            "  };",
            "}",
            "const debouncedFunction = debounce(() => console.log('Debounced!'), 300);",
            "window.addEventListener('resize', debouncedFunction);",
            "```"
        ]
    },
    {
        "id": 34,
        "topicId": 2,
        "questionId": 34,
        "question": "What is a higher-order function in JavaScript?",
        "answer": [
            "A higher-order function is a function that either takes another function as an argument or returns a function. Example:",
            "```js",
            "function makeMultiplier(factor) {",
            "  return function(value) {",
            "    return value * factor;",
            "  };",
            "}",
            "const double = makeMultiplier(2);",
            "console.log(double(5)); // 10",
            "```"
        ]
    },
    {
        "id": 35,
        "topicId": 2,
        "questionId": 35,
        "question": "What is the `Object.assign` method?",
        "answer": [
            "The `Object.assign` method copies all enumerable own properties from one or more source objects to a target object. Example:",
            "```js",
            "const target = { a: 1 };",
            "const source = { b: 2 };",
            "Object.assign(target, source);",
            "console.log(target); // { a: 1, b: 2 }",
            "```"
        ]
    },
    {
        "id": 36,
        "topicId": 2,
        "questionId": 36,
        "question": "How do you create a class in JavaScript?",
        "answer": [
            "A class is created using the `class` keyword. Example:",
            "```js",
            "class Animal {",
            "  constructor(name) {",
            "    this.name = name;",
            "  }",
            "  speak() {",
            "    console.log(`${this.name} makes a noise.`);",
            "  }",
            "}",
            "const dog = new Animal('Dog');",
            "dog.speak(); // Dog makes a noise.",
            "```"
        ]
    },
    {
        "id": 37,
        "topicId": 2,
        "questionId": 37,
        "question": "What is the `async` keyword?",
        "answer": [
            "The `async` keyword defines an asynchronous function, which returns a promise. Example:",
            "```js",
            "async function fetchData() {",
            "  return 'Data';",
            "}",
            "fetchData().then(data => console.log(data)); // Data",
            "```"
        ]
    },
    {
        "id": 38,
        "topicId": 2,
        "questionId": 38,
        "question": "What is the `await` keyword?",
        "answer": [
            "The `await` keyword pauses the execution of an `async` function until a promise is resolved. Example:",
            "```js",
            "async function fetchData() {",
            "  const response = await fetch('https://api.example.com/data');",
            "  const data = await response.json();",
            "  return data;",
            "}",
            "fetchData().then(data => console.log(data));",
            "```"
        ]
    },
    {
        "id": 39,
        "topicId": 2,
        "questionId": 39,
        "question": "What is a `Set` in JavaScript?",
        "answer": [
            "A `Set` is a collection of unique values. Example:",
            "```js",
            "const mySet = new Set([1, 2, 3, 3]);",
            "mySet.add(4);",
            "console.log(mySet); // Set { 1, 2, 3, 4 }",
            "```"
        ]
    },
    {
        "id": 40,
        "topicId": 2,
        "questionId": 40,
        "question": "How do you iterate over the properties of an object?",
        "answer": [
            "You can iterate over object properties using `for...in` or `Object.keys()`. Example with `for...in`:",
            "```js",
            "const person = { name: 'Alice', age: 25 };",
            "for (const key in person) {",
            "  console.log(key + ': ' + person[key]);",
            "}",
            "```"
        ]
    },
    {
        "id": 41,
        "topicId": 2,
        "questionId": 41,
        "question": "What are template literals in JavaScript?",
        "answer": [
            "Template literals are string literals allowing embedded expressions. They are enclosed by backticks (` `) instead of single or double quotes. Example:",
            "```js",
            "const name = 'Bob';",
            "const greeting = `Hello, ${name}!`; ",
            "console.log(greeting); // Hello, Bob!",
            "```"
        ]
    },
    {
        "id": 42,
        "topicId": 2,
        "questionId": 42,
        "question": "What is the `Object.create` method?",
        "answer": [
            "The `Object.create` method creates a new object with the specified prototype object and properties. Example:",
            "```js",
            "const person = { name: 'John' };",
            "const john = Object.create(person);",
            "console.log(john.name); // John",
            "```"
        ]
    },
    {
        "id": 43,
        "topicId": 2,
        "questionId": 43,
        "question": "What are IIFEs (Immediately Invoked Function Expressions)?",
        "answer": [
            "IIFEs are functions that execute immediately after their creation. Example:",
            "```js",
            "(function() {",
            "  console.log('IIFE executed!');",
            "})();",
            "```"
        ]
    },
    {
        "id": 44,
        "topicId": 2,
        "questionId": 44,
        "question": "What is `Object.freeze`?",
        "answer": [
            "`Object.freeze` prevents modification of an object. Example:",
            "```js",
            "const person = { name: 'Jane' };",
            "Object.freeze(person);",
            "person.name = 'Doe';",
            "console.log(person.name); // Jane",
            "```"
        ]
    },
    {
        "id": 45,
        "topicId": 2,
        "questionId": 45,
        "question": "How do you check if an array includes a specific element?",
        "answer": [
            "Use the `includes` method to check if an array includes a specific element. Example:",
            "```js",
            "const fruits = ['apple', 'banana', 'cherry'];",
            "console.log(fruits.includes('banana')); // true",
            "console.log(fruits.includes('grape')); // false",
            "```"
        ]
    },
    {
        "id": 46,
        "topicId": 2,
        "questionId": 46,
        "question": "How do you sort an array of numbers?",
        "answer": [
            "Use the `sort` method with a compare function for sorting numbers. Example:",
            "```js",
            "const numbers = [4, 2, 7, 1];",
            "numbers.sort((a, b) => a - b);",
            "console.log(numbers); // [1, 2, 4, 7]",
            "```"
        ]
    },
    {
        "id": 47,
        "topicId": 2,
        "questionId": 47,
        "question": "What is the `forEach` method?",
        "answer": [
            "The `forEach` method executes a provided function once for each array element. Example:",
            "```js",
            "const numbers = [1, 2, 3];",
            "numbers.forEach(num => console.log(num));",
            "```"
        ]
    },
    {
        "id": 48,
        "topicId": 2,
        "questionId": 48,
        "question": "How do you merge two objects in JavaScript?",
        "answer": [
            "Use `Object.assign` or the spread operator to merge two objects. Example with spread operator:",
            "```js",
            "const obj1 = { a: 1 };",
            "const obj2 = { b: 2 };",
            "const merged = { ...obj1, ...obj2 };",
            "console.log(merged); // { a: 1, b: 2 }",
            "```"
        ]
    },
    {
        "id": 49,
        "topicId": 2,
        "questionId": 49,
        "question": "What is the `prototype` property?",
        "answer": [
            "The `prototype` property is used to add properties and methods to an object’s prototype. Example:",
            "```js",
            "function Person(name) {",
            "  this.name = name;",
            "}",
            "Person.prototype.greet = function() {",
            "  console.log('Hello, ' + this.name);",
            "};",
            "const person = new Person('Alice');",
            "person.greet(); // Hello, Alice",
            "```"
        ]
    },
    {
        "id": 50,
        "topicId": 2,
        "questionId": 50,
        "question": "What is a `Symbol` in JavaScript?",
        "answer": [
            "A `Symbol` is a primitive data type used to create unique identifiers. Example:",
            "```js",
            "const uniqueSymbol = Symbol('description');",
            "const obj = { [uniqueSymbol]: 'value' };",
            "console.log(obj[uniqueSymbol]); // value",
            "```"
        ]
    },
    {
        "id": 51,
        "topicId": 2,
        "questionId": 51,
        "question": "What is event delegation in JavaScript?",
        "answer": [
            "Event delegation involves attaching a single event listener to a parent element to manage events for its child elements. Example:",
            "```js",
            "document.getElementById('parent').addEventListener('click', (event) => {",
            "  if (event.target && event.target.matches('button.child')) {",
            "    console.log('Child button clicked!');",
            "  }",
            "});",
            "```"
        ]
    },
    {
        "id": 52,
        "topicId": 2,
        "questionId": 52,
        "question": "What is a closure in JavaScript?",
        "answer": [
            "A closure is a function that retains access to its lexical scope even after the function has finished executing. Example:",
            "```js",
            "function makeCounter() {",
            "  let count = 0;",
            "  return function() {",
            "    count += 1;",
            "    return count;",
            "  };",
            "}",
            "const counter = makeCounter();",
            "console.log(counter()); // 1",
            "console.log(counter()); // 2",
            "```"
        ]
    },
    {
        "id": 53,
        "topicId": 2,
        "questionId": 53,
        "question": "How do you convert a string to a number in JavaScript?",
        "answer": [
            "Use `Number()`, `parseInt()`, or `parseFloat()`. Example:",
            "```js",
            "const str = '123';",
            "const num1 = Number(str);",
            "const num2 = parseInt(str, 10);",
            "const num3 = parseFloat(str);",
            "console.log(num1); // 123",
            "console.log(num2); // 123",
            "console.log(num3); // 123",
            "```"
        ]
    },
    {
        "id": 54,
        "topicId": 2,
        "questionId": 54,
        "question": "What is the `setTimeout` function?",
        "answer": [
            "The `setTimeout` function executes a function after a specified delay. Example:",
            "```js",
            "setTimeout(() => {",
            "  console.log('Executed after 1 second');",
            "}, 1000);",
            "```"
        ]
    },
    {
        "id": 55,
        "topicId": 2,
        "questionId": 55,
        "question": "What is the difference between `==` and `===`?",
        "answer": [
            "`==` checks for equality with type conversion, while `===` checks for equality without type conversion. Example:",
            "```js",
            "console.log(5 == '5'); // true",
            "console.log(5 === '5'); // false",
            "```"
        ]
    },
    {
        "id": 56,
        "topicId": 2,
        "questionId": 56,
        "question": "How do you check if a value is an array?",
        "answer": [
            "Use `Array.isArray()`. Example:",
            "```js",
            "const arr = [1, 2, 3];",
            "console.log(Array.isArray(arr)); // true",
            "console.log(Array.isArray({})); // false",
            "```"
        ]
    },
    {
        "id": 57,
        "topicId": 2,
        "questionId": 57,
        "question": "What are `async` functions and `await` expressions?",
        "answer": [
            "`async` functions return a promise, and `await` pauses execution until the promise is resolved. Example:",
            "```js",
            "async function fetchData() {",
            "  const response = await fetch('https://api.example.com/data');",
            "  const data = await response.json();",
            "  return data;",
            "}",
            "fetchData().then(data => console.log(data));",
            "```"
        ]
    },
    {
        "id": 58,
        "topicId": 2,
        "questionId": 58,
        "question": "What is the `Object.keys` method?",
        "answer": [
            "The `Object.keys` method returns an array of a given object's own enumerable property names. Example:",
            "```js",
            "const obj = { a: 1, b: 2 };",
            "console.log(Object.keys(obj)); // ['a', 'b']",
            "```"
        ]
    },
    {
        "id": 59,
        "topicId": 2,
        "questionId": 59,
        "question": "What is the difference between `var`, `let`, and `const`?",
        "answer": [
            "`var` is function-scoped and can be re-declared, `let` is block-scoped and cannot be re-declared in the same scope, while `const` is block-scoped and its value cannot be reassigned. Example:",
            "```js",
            "var x = 1;",
            "let y = 2;",
            "const z = 3;",
            "x = 4; // allowed",
            "y = 5; // allowed",
            "z = 6; // TypeError: Assignment to constant variable.",
            "```"
        ]
    },
    {
        "id": 60,
        "topicId": 2,
        "questionId": 60,
        "question": "What are `generators` in JavaScript?",
        "answer": [
            "Generators are functions that can be paused and resumed. They use the `function*` syntax. Example:",
            "```js",
            "function* generateNumbers() {",
            "  yield 1;",
            "  yield 2;",
            "  yield 3;",
            "}",
            "const gen = generateNumbers();",
            "console.log(gen.next().value); // 1",
            "console.log(gen.next().value); // 2",
            "console.log(gen.next().value); // 3",
            "```"
        ]
    },
    {
        "id": 61,
        "topicId": 2,
        "questionId": 61,
        "question": "What is `this` in JavaScript?",
        "answer": [
            "`this` refers to the object that is executing the current function. Example:",
            "```js",
            "const obj = {",
            "  name: 'Alice',",
            "  greet() {",
            "    console.log('Hello, ' + this.name);",
            "  }",
            "};",
            "obj.greet(); // Hello, Alice",
            "```"
        ]
    },
    {
        "id": 62,
        "topicId": 2,
        "questionId": 62,
        "question": "What is the purpose of `Array.prototype.reduce`?",
        "answer": [
            "The `reduce` method executes a reducer function (that you provide) on each element of the array, resulting in a single output value. Example:",
            "```js",
            "const numbers = [1, 2, 3];",
            "const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);",
            "console.log(sum); // 6",
            "```"
        ]
    },
    {
        "id": 63,
        "topicId": 2,
        "questionId": 63,
        "question": "How do you create a new array with the `map` method?",
        "answer": [
            "The `map` method creates a new array with the results of calling a provided function on every element in the calling array. Example:",
            "```js",
            "const numbers = [1, 2, 3];",
            "const doubled = numbers.map(num => num * 2);",
            "console.log(doubled); // [2, 4, 6]",
            "```"
        ]
    },
    {
        "id": 64,
        "topicId": 2,
        "questionId": 64,
        "question": "What is the `filter` method in JavaScript?",
        "answer": [
            "The `filter` method creates a new array with all elements that pass the test implemented by the provided function. Example:",
            "```js",
            "const numbers = [1, 2, 3, 4, 5];",
            "const evenNumbers = numbers.filter(num => num % 2 === 0);",
            "console.log(evenNumbers); // [2, 4]",
            "```"
        ]
    },
    {
        "id": 65,
        "topicId": 2,
        "questionId": 65,
        "question": "What is `Object.entries`?",
        "answer": [
            "The `Object.entries` method returns an array of a given object's own enumerable string-keyed property [key, value] pairs. Example:",
            "```js",
            "const obj = { a: 1, b: 2 };",
            "console.log(Object.entries(obj)); // [['a', 1], ['b', 2]]",
            "```"
        ]
    },
    {
        "id": 66,
        "topicId": 2,
        "questionId": 66,
        "question": "How do you handle exceptions in JavaScript?",
        "answer": [
            "Exceptions are handled using `try...catch` blocks. Example:",
            "```js",
            "try {",
            "  throw new Error('Something went wrong');",
            "} catch (error) {",
            "  console.log(error.message);",
            "}",
            "```"
        ]
    },
    {
        "id": 67,
        "topicId": 2,
        "questionId": 67,
        "question": "What is the `spread` operator?",
        "answer": [
            "The `spread` operator (`...`) allows an iterable to be expanded in places where zero or more arguments or elements are expected. Example:",
            "```js",
            "const arr1 = [1, 2];",
            "const arr2 = [3, 4];",
            "const merged = [...arr1, ...arr2];",
            "console.log(merged); // [1, 2, 3, 4]",
            "```"
        ]
    },
    {
        "id": 68,
        "topicId": 2,
        "questionId": 68,
        "question": "What is the `rest` parameter?",
        "answer": [
            "The `rest` parameter (`...`) allows a function to accept an indefinite number of arguments as an array. Example:",
            "```js",
            "function sum(...numbers) {",
            "  return numbers.reduce((acc, num) => acc + num, 0);",
            "}",
            "console.log(sum(1, 2, 3)); // 6",
            "```"
        ]
    },
    {
        "id": 69,
        "topicId": 2,
        "questionId": 69,
        "question": "What are `template literals` used for?",
        "answer": [
            "Template literals are used for string interpolation and multi-line strings. They are enclosed by backticks (` `). Example:",
            "```js",
            "const name = 'Bob';",
            "const message = `Hello, ${name}!`; ",
            "console.log(message); // Hello, Bob!",
            "```"
        ]
    },
    {
        "id": 70,
        "topicId": 2,
        "questionId": 70,
        "question": "What is `function binding`?",
        "answer": [
            "Function binding is the process of creating a new function with a specified `this` value and initial arguments. Example:",
            "```js",
            "function greet(greeting) {",
            "  console.log(`${greeting}, ${this.name}`);",
            "}",
            "const person = { name: 'Alice' };",
            "const boundGreet = greet.bind(person, 'Hello');",
            "boundGreet(); // Hello, Alice",
            "```"
        ]
    },
    {
        "id": 71,
        "topicId": 2,
        "questionId": 71,
        "question": "How do you clone an object in JavaScript?",
        "answer": [
            "You can clone an object using `Object.assign` or the spread operator. Example with spread operator:",
            "```js",
            "const original = { a: 1, b: 2 };",
            "const clone = { ...original };",
            "console.log(clone); // { a: 1, b: 2 }",
            "```"
        ]
    },
    {
        "id": 72,
        "topicId": 2,
        "questionId": 72,
        "question": "What is the `Object.defineProperty` method?",
        "answer": [
            "The `Object.defineProperty` method adds a property to an object, or modifies an existing property. Example:",
            "```js",
            "const obj = {};",
            "Object.defineProperty(obj, 'prop', {",
            "  value: 42,",
            "  writable: true,",
            "  enumerable: true,",
            "  configurable: true",
            "});",
            "console.log(obj.prop); // 42",
            "```"
        ]
    },
    {
        "id": 73,
        "topicId": 2,
        "questionId": 73,
        "question": "What is the `delete` operator?",
        "answer": [
            "The `delete` operator removes a property from an object. Example:",
            "```js",
            "const obj = { a: 1, b: 2 };",
            "delete obj.b;",
            "console.log(obj); // { a: 1 }",
            "```"
        ]
    },
    {
        "id": 74,
        "topicId": 2,
        "questionId": 74,
        "question": "What are `Array` methods `concat` and `slice`?",
        "answer": [
            "`concat` merges arrays, while `slice` creates a shallow copy of a portion of an array. Example:",
            "```js",
            "const arr1 = [1, 2];",
            "const arr2 = [3, 4];",
            "const merged = arr1.concat(arr2);",
            "const sliced = merged.slice(1, 3);",
            "console.log(merged); // [1, 2, 3, 4]",
            "console.log(sliced); // [2, 3]",
            "```"
        ]
    },
    {
        "id": 75,
        "topicId": 2,
        "questionId": 75,
        "question": "What is the `Math` object in JavaScript?",
        "answer": [
            "The `Math` object provides properties and methods for mathematical constants and functions. Example:",
            "```js",
            "console.log(Math.PI); // 3.141592653589793",
            "console.log(Math.sqrt(16)); // 4",
            "console.log(Math.random()); // Random number between 0 and 1",
            "```"
        ]
    },
    {
        "id": 76,
        "topicId": 2,
        "questionId": 76,
        "question": "How do you check if a variable is undefined?",
        "answer": [
            "You can check if a variable is `undefined` using `typeof` or strict comparison. Example:",
            "```js",
            "let x;",
            "console.log(typeof x === 'undefined'); // true",
            "console.log(x === undefined); // true",
            "```"
        ]
    },
    {
        "id": 77,
        "topicId": 2,
        "questionId": 77,
        "question": "What is `null` in JavaScript?",
        "answer": [
            "`null` is a special value representing the intentional absence of any object value. Example:",
            "```js",
            "let value = null;",
            "console.log(value); // null",
            "```"
        ]
    },
    {
        "id": 78,
        "topicId": 2,
        "questionId": 78,
        "question": "What is `NaN`?",
        "answer": [
            "`NaN` stands for 'Not-a-Number', and it represents a value that is not a legal number. Example:",
            "```js",
            "const result = 'string' / 2;",
            "console.log(result); // NaN",
            "console.log(isNaN(result)); // true",
            "```"
        ]
    },
    {
        "id": 79,
        "topicId": 2,
        "questionId": 79,
        "question": "What is `Infinity` in JavaScript?",
        "answer": [
            "`Infinity` is a global property representing positive infinity. Example:",
            "```js",
            "console.log(1 / 0); // Infinity",
            "console.log(-1 / 0); // -Infinity",
            "```"
        ]
    },
    {
        "id": 80,
        "topicId": 2,
        "questionId": 80,
        "question": "What is a `callback` function?",
        "answer": [
            "A callback function is a function passed into another function as an argument to be executed later. Example:",
            "```js",
            "function fetchData(callback) {",
            "  setTimeout(() => {",
            "    callback('Data fetched');",
            "  }, 1000);",
            "}",
            "fetchData((message) => console.log(message)); // Data fetched",
            "```"
        ]
    },
    {
        "id": 81,
        "topicId": 2,
        "questionId": 81,
        "question": "What is the `clearTimeout` function?",
        "answer": [
            "The `clearTimeout` function cancels a timeout previously established by `setTimeout`. Example:",
            "```js",
            "const timeoutId = setTimeout(() => {",
            "  console.log('This will not run');",
            "}, 1000);",
            "clearTimeout(timeoutId);",
            "```"
        ]
    },
    {
        "id": 82,
        "topicId": 2,
        "questionId": 82,
        "question": "How do you handle asynchronous operations in JavaScript?",
        "answer": [
            "Asynchronous operations can be handled using callbacks, promises, or `async/await`. Example with promises:",
            "```js",
            "function fetchData() {",
            "  return new Promise((resolve, reject) => {",
            "    setTimeout(() => resolve('Data fetched'), 1000);",
            "  });",
            "}",
            "fetchData().then(data => console.log(data)); // Data fetched",
            "```"
        ]
    },
    {
        "id": 83,
        "topicId": 2,
        "questionId": 83,
        "question": "What is `JSON.stringify`?",
        "answer": [
            "The `JSON.stringify` method converts a JavaScript object into a JSON string. Example:",
            "```js",
            "const obj = { a: 1, b: 2 };",
            "const jsonString = JSON.stringify(obj);",
            "console.log(jsonString); // '{\"a\":1,\"b\":2}'",
            "```"
        ]
    },
    {
        "id": 84,
        "topicId": 2,
        "questionId": 84,
        "question": "What is `JSON.parse`?",
        "answer": [
            "The `JSON.parse` method parses a JSON string and constructs the JavaScript value or object described by the string. Example:",
            "```js",
            "const jsonString = '{\"a\":1,\"b\":2}';",
            "const obj = JSON.parse(jsonString);",
            "console.log(obj); // { a: 1, b: 2 }",
            "```"
        ]
    },
    {
        "id": 85,
        "topicId": 2,
        "questionId": 85,
        "question": "How do you create a new promise?",
        "answer": [
            "A new promise can be created using the `Promise` constructor. Example:",
            "```js",
            "const promise = new Promise((resolve, reject) => {",
            "  const success = true;",
            "  if (success) {",
            "    resolve('Promise resolved');",
            "  } else {",
            "    reject('Promise rejected');",
            "  }",
            "});",
            "promise.then(result => console.log(result)).catch(error => console.log(error));",
            "```"
        ]
    },
    {
        "id": 86,
        "topicId": 2,
        "questionId": 86,
        "question": "What is `setInterval`?",
        "answer": [
            "The `setInterval` function executes a function repeatedly with a fixed time delay between each call. Example:",
            "```js",
            "const intervalId = setInterval(() => {",
            "  console.log('This will run every 2 seconds');",
            "}, 2000);",
            "clearInterval(intervalId); // Stop the interval",
            "```"
        ]
    },
    {
        "id": 87,
        "topicId": 2,
        "questionId": 87,
        "question": "What is `Object.freeze`?",
        "answer": [
            "The `Object.freeze` method freezes an object, preventing new properties from being added, existing properties from being removed, or altered. Example:",
            "```js",
            "const obj = { a: 1 };",
            "Object.freeze(obj);",
            "obj.a = 2; // This will not change the value",
            "console.log(obj.a); // 1",
            "```"
        ]
    },
    {
        "id": 88,
        "topicId": 2,
        "questionId": 88,
        "question": "How do you use `Array.prototype.find`?",
        "answer": [
            "The `find` method returns the first element that satisfies the provided testing function. Example:",
            "```js",
            "const numbers = [1, 2, 3, 4, 5];",
            "const found = numbers.find(num => num > 3);",
            "console.log(found); // 4",
            "```"
        ]
    },
    {
        "id": 89,
        "topicId": 2,
        "questionId": 89,
        "question": "What is the purpose of `Array.prototype.some`?",
        "answer": [
            "The `some` method tests whether at least one element in the array passes the test implemented by the provided function. Example:",
            "```js",
            "const numbers = [1, 2, 3, 4, 5];",
            "const hasEven = numbers.some(num => num % 2 === 0);",
            "console.log(hasEven); // true",
            "```"
        ]
    },
    {
        "id": 90,
        "topicId": 2,
        "questionId": 90,
        "question": "What is the `Object.create` method?",
        "answer": [
            "The `Object.create` method creates a new object with the specified prototype object and properties. Example:",
            "```js",
            "const proto = { greet() { return 'Hello'; } };",
            "const obj = Object.create(proto);",
            "console.log(obj.greet()); // Hello",
            "```"
        ]
    },
    {
        "id": 91,
        "topicId": 2,
        "questionId": 91,
        "question": "How do you convert a number to a string?",
        "answer": [
            "You can convert a number to a string using `String()` or `toString()`. Example:",
            "```js",
            "const num = 123;",
            "const str1 = String(num);",
            "const str2 = num.toString();",
            "console.log(str1); // '123'",
            "console.log(str2); // '123'",
            "```"
        ]
    },
    {
        "id": 92,
        "topicId": 2,
        "questionId": 92,
        "question": "What is `Array.prototype.splice`?",
        "answer": [
            "The `splice` method changes the contents of an array by removing or replacing existing elements and/or adding new elements. Example:",
            "```js",
            "const arr = [1, 2, 3, 4, 5];",
            "arr.splice(2, 1, 'a', 'b');",
            "console.log(arr); // [1, 2, 'a', 'b', 4, 5]",
            "```"
        ]
    },
    {
        "id": 93,
        "topicId": 2,
        "questionId": 93,
        "question": "How do you use `Array.prototype.forEach`?",
        "answer": [
            "The `forEach` method executes a provided function once for each array element. Example:",
            "```js",
            "const numbers = [1, 2, 3];",
            "numbers.forEach(num => console.log(num));",
            "```"
        ]
    },
    {
        "id": 94,
        "topicId": 2,
        "questionId": 94,
        "question": "What is `Function.prototype.call`?",
        "answer": [
            "The `call` method calls a function with a given `this` value and arguments provided individually. Example:",
            "```js",
            "function greet(greeting) {",
            "  console.log(`${greeting}, ${this.name}`);",
            "}",
            "const person = { name: 'Alice' };",
            "greet.call(person, 'Hello'); // Hello, Alice",
            "```"
        ]
    },
    {
        "id": 95,
        "topicId": 2,
        "questionId": 95,
        "question": "How do you use `Function.prototype.apply`?",
        "answer": [
            "The `apply` method calls a function with a given `this` value and arguments provided as an array. Example:",
            "```js",
            "function sum(a, b) {",
            "  return a + b;",
            "}",
            "console.log(sum.apply(null, [1, 2])); // 3",
            "```"
        ]
    },
    {
        "id": 96,
        "topicId": 2,
        "questionId": 96,
        "question": "What is `Function.prototype.bind`?",
        "answer": [
            "The `bind` method creates a new function that, when called, has its `this` keyword set to the provided value. Example:",
            "```js",
            "function greet(greeting) {",
            "  console.log(`${greeting}, ${this.name}`);",
            "}",
            "const person = { name: 'Alice' };",
            "const boundGreet = greet.bind(person, 'Hello');",
            "boundGreet(); // Hello, Alice",
            "```"
        ]
    },
    {
        "id": 97,
        "topicId": 2,
        "questionId": 97,
        "question": "How do you check if a value is an integer?",
        "answer": [
            "Use `Number.isInteger()`. Example:",
            "```js",
            "console.log(Number.isInteger(4)); // true",
            "console.log(Number.isInteger(4.5)); // false",
            "```"
        ]
    },
    {
        "id": 98,
        "topicId": 2,
        "questionId": 98,
        "question": "What is the `Promise.all` method?",
        "answer": [
            "The `Promise.all` method returns a single promise that resolves when all of the promises in the iterable argument have resolved or when the iterable contains no promises. Example:",
            "```js",
            "const p1 = Promise.resolve(1);",
            "const p2 = Promise.resolve(2);",
            "Promise.all([p1, p2]).then(values => console.log(values)); // [1, 2]",
            "```"
        ]
    },
    {
        "id": 99,
        "topicId": 2,
        "questionId": 99,
        "question": "What is the `Promise.race` method?",
        "answer": [
            "The `Promise.race` method returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves or rejects. Example:",
            "```js",
            "const p1 = new Promise((resolve, reject) => setTimeout(resolve, 500, 'first'));",
            "const p2 = new Promise((resolve, reject) => setTimeout(resolve, 100, 'second'));",
            "Promise.race([p1, p2]).then(value => console.log(value)); // 'second'",
            "```"
        ]
    },
    {
        "id": 100,
        "topicId": 2,
        "questionId": 100,
        "question": "What is `async/await`?",
        "answer": [
            "`async/await` is a syntax for working with asynchronous code that is more readable and easier to work with than promises alone. Example:",
            "```js",
            "async function fetchData() {",
            "  return 'Data fetched';",
            "}",
            "fetchData().then(data => console.log(data)); // Data fetched",
            "```"
        ]
    },
    {
        "id": 101,
        "topicId": 2,
        "questionId": 101,
        "question": "What is the output of `0.1 + 0.2 === 0.3`?",
        "answer": [
            "The output is `false`. This is due to floating-point precision issues in JavaScript. Example:",
            "```js",
            "console.log(0.1 + 0.2 === 0.3); // false",
            "```"
        ]
    },
    {
        "id": 102,
        "topicId": 2,
        "questionId": 102,
        "question": "What will `[] == ![]` evaluate to?",
        "answer": [
            "The result is `true`. The empty array `[]` is coerced to `false` and the `![]` evaluates to `false`. Example:",
            "```js",
            "console.log([] == ![]); // true",
            "```"
        ]
    },
    {
        "id": 103,
        "topicId": 2,
        "questionId": 103,
        "question": "What is the result of `'false' == false`?",
        "answer": [
            "The result is `false`. A string `'false'` is not equal to a boolean `false`. Example:",
            "```js",
            "console.log('false' == false); // false",
            "```"
        ]
    },
    {
        "id": 104,
        "topicId": 2,
        "questionId": 104,
        "question": "What is the result of `null + 1`?",
        "answer": [
            "The result is `1`. `null` is coerced to `0` in numerical operations. Example:",
            "```js",
            "console.log(null + 1); // 1",
            "```"
        ]
    },
    {
        "id": 105,
        "topicId": 2,
        "questionId": 105,
        "question": "What is the output of `typeof NaN`?",
        "answer": [
            "The output is `number`. `NaN` stands for 'Not-a-Number' but is still of type `number`. Example:",
            "```js",
            "console.log(typeof NaN); // number",
            "```"
        ]
    },
    {
        "id": 106,
        "topicId": 2,
        "questionId": 106,
        "question": "What will `([] + {})` return?",
        "answer": [
            "The result is `'[object Object]'`. When an array is added to an object, JavaScript converts them to strings. Example:",
            "```js",
            "console.log([] + {}); // '[object Object]'",
            "```"
        ]
    },
    {
        "id": 107,
        "topicId": 2,
        "questionId": 107,
        "question": "What will `[] == false` return?",
        "answer": [
            "The result is `true`. An empty array `[]` is coerced to `false` in non-strict equality comparison. Example:",
            "```js",
            "console.log([] == false); // true",
            "```"
        ]
    },
    {
        "id": 108,
        "topicId": 2,
        "questionId": 108,
        "question": "What is the result of `typeof typeof 1`?",
        "answer": [
            "The result is `string`. `typeof 1` evaluates to `'number'`, and `typeof 'number'` evaluates to `'string'`. Example:",
            "```js",
            "console.log(typeof typeof 1); // string",
            "```"
        ]
    },
    {
        "id": 109,
        "topicId": 2,
        "questionId": 109,
        "question": "What is the result of `0 == '0'`?",
        "answer": [
            "The result is `true`. JavaScript coerces the string `'0'` to the number `0` in non-strict equality comparison. Example:",
            "```js",
            "console.log(0 == '0'); // true",
            "```"
        ]
    },
    {
        "id": 110,
        "topicId": 2,
        "questionId": 110,
        "question": "What will `{} + []` return?",
        "answer": [
            "The result is `0`. This is due to JavaScript's automatic type coercion and interpretation of the code. Example:",
            "```js",
            "console.log({} + []); // 0",
            "```"
        ]
    },
    {
        "id": 111,
        "topicId": 2,
        "questionId": 111,
        "question": "What is the result of `true + 1`?",
        "answer": [
            "The result is `2`. `true` is coerced to `1` in numerical operations. Example:",
            "```js",
            "console.log(true + 1); // 2",
            "```"
        ]
    },
    {
        "id": 112,
        "topicId": 2,
        "questionId": 112,
        "question": "What is the result of `typeof 0`?",
        "answer": [
            "The result is `number`. `0` is a number in JavaScript. Example:",
            "```js",
            "console.log(typeof 0); // number",
            "```"
        ]
    },
    {
        "id": 113,
        "topicId": 2,
        "questionId": 113,
        "question": "What is the output of `0.1 + 0.2 == 0.3`?",
        "answer": [
            "The output is `false`. Due to floating-point precision issues in JavaScript, this comparison returns `false`. Example:",
            "```js",
            "console.log(0.1 + 0.2 == 0.3); // false",
            "```"
        ]
    },
    {
        "id": 114,
        "topicId": 2,
        "questionId": 114,
        "question": "What is the result of `1 + '1'`?",
        "answer": [
            "The result is `'11'`. The number `1` is coerced into a string and concatenated with `'1'`. Example:",
            "```js",
            "console.log(1 + '1'); // '11'",
            "```"
        ]
    },
    {
        "id": 115,
        "topicId": 2,
        "questionId": 115,
        "question": "What is the result of `'1' - 1`?",
        "answer": [
            "The result is `0`. The string `'1'` is coerced to a number before the subtraction operation. Example:",
            "```js",
            "console.log('1' - 1); // 0",
            "```"
        ]
    },
    {
        "id": 116,
        "topicId": 2,
        "questionId": 116,
        "question": "What is the result of `false + 1`?",
        "answer": [
            "The result is `1`. `false` is coerced to `0` in numerical operations. Example:",
            "```js",
            "console.log(false + 1); // 1",
            "```"
        ]
    },
    {
        "id": 117,
        "topicId": 2,
        "questionId": 117,
        "question": "What will `'' == 0` return?",
        "answer": [
            "The result is `true`. The empty string `''` is coerced to `0` in non-strict equality comparison. Example:",
            "```js",
            "console.log('' == 0); // true",
            "```"
        ]
    },
    {
        "id": 118,
        "topicId": 2,
        "questionId": 118,
        "question": "What is the result of `[] + {}`?",
        "answer": [
            "The result is `'[object Object]'`. The array `[]` is converted to an empty string and the object `{}` is converted to its string representation. Example:",
            "```js",
            "console.log([] + {}); // '[object Object]'",
            "```"
        ]
    },
    {
        "id": 119,
        "topicId": 2,
        "questionId": 119,
        "question": "What will `[] == ![]` return?",
        "answer": [
            "The result is `true`. An empty array `[]` is coerced to `false`, and `![]` evaluates to `false`. Example:",
            "```js",
            "console.log([] == ![]); // true",
            "```"
        ]
    },
    {
        "id": 120,
        "topicId": 2,
        "questionId": 120,
        "question": "What will `typeof NaN` return?",
        "answer": [
            "The result is `number`. `NaN` stands for 'Not-a-Number' but is of type `number`. Example:",
            "```js",
            "console.log(typeof NaN); // number",
            "```"
        ]
    },
    {
        "id": 121,
        "topicId": 2,
        "questionId": 121,
        "question": "What is the result of `[] == 0`?",
        "answer": [
            "The result is `false`. An empty array `[]` is not equal to `0` in non-strict equality comparison. Example:",
            "```js",
            "console.log([] == 0); // false",
            "```"
        ]
    },
    {
        "id": 122,
        "topicId": 2,
        "questionId": 122,
        "question": "What will `[] + []` return?",
        "answer": [
            "The result is an empty string `''`. Both arrays are converted to strings and concatenated. Example:",
            "```js",
            "console.log([] + []); // ''",
            "```"
        ]
    },
    {
        "id": 123,
        "topicId": 2,
        "questionId": 123,
        "question": "What will `typeof []` return?",
        "answer": [
            "The result is `object`. Arrays are considered objects in JavaScript. Example:",
            "```js",
            "console.log(typeof []); // object",
            "```"
        ]
    },
    {
        "id": 124,
        "topicId": 2,
        "questionId": 124,
        "question": "What is the result of `Number('10') + 1`?",
        "answer": [
            "The result is `11`. The string `'10'` is coerced to the number `10`. Example:",
            "```js",
            "console.log(Number('10') + 1); // 11",
            "```"
        ]
    },
    {
        "id": 125,
        "topicId": 2,
        "questionId": 125,
        "question": "What is the result of `typeof null`?",
        "answer": [
            "The result is `object`. This is a historical bug in JavaScript, where `null` is considered an object type. Example:",
            "```js",
            "console.log(typeof null); // object",
            "```"
        ]
    },
    {
        "id": 126,
        "topicId": 2,
        "questionId": 126,
        "question": "What is the result of `('true' == true)`?",
        "answer": [
            "The result is `false`. The string `'true'` is not equal to the boolean `true` in non-strict equality comparison. Example:",
            "```js",
            "console.log('true' == true); // false",
            "```"
        ]
    },
    {
        "id": 127,
        "topicId": 2,
        "questionId": 127,
        "question": "What will `2 == [2]` return?",
        "answer": [
            "The result is `true`. The array `[2]` is coerced to the number `2`, which makes the comparison `2 == 2`. Example:",
            "```js",
            "console.log(2 == [2]); // true",
            "```"
        ]
    },
    {
        "id": 128,
        "topicId": 2,
        "questionId": 128,
        "question": "What is the result of `typeof ({} + [])`?",
        "answer": [
            "The result is `string`. The expression `{}` is interpreted as a block statement, and `[]` is coerced to a string, so the result is `''`. Example:",
            "```js",
            "console.log(typeof ({} + [])); // string",
            "```"
        ]
    },
    {
        "id": 129,
        "topicId": 2,
        "questionId": 129,
        "question": "What is the result of `![] == false`?",
        "answer": [
            "The result is `true`. The empty array `[]` is coerced to `false`, and `![]` evaluates to `false`. Example:",
            "```js",
            "console.log(![] == false); // true",
            "```"
        ]
    },
    {
        "id": 130,
        "topicId": 2,
        "questionId": 130,
        "question": "What is the result of `[] == ![]`?",
        "answer": [
            "The result is `true`. The empty array `[]` is coerced to `false`, and `![]` evaluates to `false`. Example:",
            "```js",
            "console.log([] == ![]); // true",
            "```"
        ]
    },
    {
        "id": 131,
        "topicId": 2,
        "questionId": 131,
        "question": "What will `true + true` return?",
        "answer": [
            "The result is `2`. `true` is coerced to `1` in numerical operations. Example:",
            "```js",
            "console.log(true + true); // 2",
            "```"
        ]
    },
    {
        "id": 132,
        "topicId": 2,
        "questionId": 132,
        "question": "What will `!('' == 0)` return?",
        "answer": [
            "The result is `false`. The empty string `''` is coerced to `0`, so `'' == 0` is `true`, and negating it results in `false`. Example:",
            "```js",
            "console.log(!('' == 0)); // false",
            "```"
        ]
    },
    {
        "id": 133,
        "topicId": 2,
        "questionId": 133,
        "question": "What is the result of `[] == 0`?",
        "answer": [
            "The result is `false`. The empty array `[]` is not equal to `0` in non-strict equality comparison. Example:",
            "```js",
            "console.log([] == 0); // false",
            "```"
        ]
    },
    {
        "id": 134,
        "topicId": 2,
        "questionId": 134,
        "question": "What is the output of `0 == '0'`?",
        "answer": [
            "The result is `true`. `0` is loosely equal to `'0'` due to type coercion. Example:",
            "```js",
            "console.log(0 == '0'); // true",
            "```"
        ]
    },
    {
        "id": 135,
        "topicId": 2,
        "questionId": 135,
        "question": "What will `typeof (1 + '1')` return?",
        "answer": [
            "The result is `string`. The number `1` is coerced to the string `'1'`, resulting in the string `'11'`. Example:",
            "```js",
            "console.log(typeof (1 + '1')); // string",
            "```"
        ]
    },
    {
        "id": 136,
        "topicId": 2,
        "questionId": 136,
        "question": "What is the result of `'1' - 1`?",
        "answer": [
            "The result is `0`. The string `'1'` is coerced to a number before the subtraction operation. Example:",
            "```js",
            "console.log('1' - 1); // 0",
            "```"
        ]
    },
    {
        "id": 137,
        "topicId": 2,
        "questionId": 137,
        "question": "What will `null == undefined` return?",
        "answer": [
            "The result is `true`. `null` and `undefined` are loosely equal but not strictly equal. Example:",
            "```js",
            "console.log(null == undefined); // true",
            "```"
        ]
    },
    {
        "id": 138,
        "topicId": 2,
        "questionId": 138,
        "question": "What will `true + 1` return?",
        "answer": [
            "The result is `2`. `true` is coerced to `1`, and the addition yields `2`. Example:",
            "```js",
            "console.log(true + 1); // 2",
            "```"
        ]
    },
    {
        "id": 139,
        "topicId": 2,
        "questionId": 139,
        "question": "What is the result of `!![]`?",
        "answer": [
            "The result is `true`. An empty array `[]` is a truthy value, and double negation `!!` converts it to `true`. Example:",
            "```js",
            "console.log(!![]); // true",
            "```"
        ]
    },
    {
        "id": 140,
        "topicId": 2,
        "questionId": 140,
        "question": "What is the result of `{} + []`?",
        "answer": [
            "The result is `0`. The expression is interpreted as a block statement followed by the addition of an empty array. Example:",
            "```js",
            "console.log({} + []); // 0",
            "```"
        ]
    },
    {
        "id": 141,
        "topicId": 2,
        "questionId": 141,
        "question": "What is the result of `typeof []`?",
        "answer": [
            "The result is `object`. Arrays are treated as objects in JavaScript. Example:",
            "```js",
            "console.log(typeof []); // object",
            "```"
        ]
    },
    {
        "id": 142,
        "topicId": 2,
        "questionId": 142,
        "question": "What is the result of `!!{}`?",
        "answer": [
            "The result is `true`. An empty object `{}` is a truthy value, and double negation `!!` converts it to `true`. Example:",
            "```js",
            "console.log(!!{}); // true",
            "```"
        ]
    },
    {
        "id": 143,
        "topicId": 2,
        "questionId": 143,
        "question": "What will `1 + []` return?",
        "answer": [
            "The result is `'1'`. The number `1` is coerced into a string and concatenated with an empty array. Example:",
            "```js",
            "console.log(1 + []); // '1'",
            "```"
        ]
    },
    {
        "id": 144,
        "topicId": 2,
        "questionId": 144,
        "question": "What is the result of `[] + {}`?",
        "answer": [
            "The result is `'[object Object]'`. The array `[]` is converted to an empty string, and the object `{}` is converted to its string representation. Example:",
            "```js",
            "console.log([] + {}); // '[object Object]'",
            "```"
        ]
    },
    {
        "id": 145,
        "topicId": 2,
        "questionId": 145,
        "question": "What is the result of `true + '1'`?",
        "answer": [
            "The result is `'true1'`. The boolean `true` is coerced into the string `'true'` and concatenated with `'1'`. Example:",
            "```js",
            "console.log(true + '1'); // 'true1'",
            "```"
        ]
    },
    {
        "id": 146,
        "topicId": 2,
        "questionId": 146,
        "question": "What is the result of `[] == false`?",
        "answer": [
            "The result is `false`. An empty array `[]` is not equal to `false` in non-strict equality comparison. Example:",
            "```js",
            "console.log([] == false); // false",
            "```"
        ]
    },
    {
        "id": 147,
        "topicId": 2,
        "questionId": 147,
        "question": "What will `undefined == null` return?",
        "answer": [
            "The result is `true`. `undefined` and `null` are loosely equal to each other. Example:",
            "```js",
            "console.log(undefined == null); // true",
            "```"
        ]
    },
    {
        "id": 148,
        "topicId": 2,
        "questionId": 148,
        "question": "What is the result of `!!''`?",
        "answer": [
            "The result is `false`. An empty string `''` is falsy, and double negation `!!` converts it to `false`. Example:",
            "```js",
            "console.log(!!''); // false",
            "```"
        ]
    },
    {
        "id": 149,
        "topicId": 2,
        "questionId": 149,
        "question": "What is the result of `1 - '1'`?",
        "answer": [
            "The result is `0`. The string `'1'` is coerced to the number `1` before subtraction. Example:",
            "```js",
            "console.log(1 - '1'); // 0",
            "```"
        ]
    },
    {
        "id": 150,
        "topicId": 2,
        "questionId": 150,
        "question": "What is the result of `1 + '1'`?",
        "answer": [
            "The result is `'11'`. The number `1` is coerced into a string and concatenated with `'1'`. Example:",
            "```js",
            "console.log(1 + '1'); // '11'",
            "```"
        ]
    }
]