[
    {
        "id": 1,
        "topicId": 4,
        "questionId": 1,
        "question": "How do you implement a stack in JavaScript?",
        "answer": [
            "You can implement a stack using an array.",
            "```js",
            "class Stack {",
            "  constructor() {",
            "    this.items = [];",
            "  }",
            "  push(element) {",
            "    this.items.push(element);",
            "  }",
            "  pop() {",
            "    if (this.isEmpty())",
            "      return 'Underflow';",
            "    return this.items.pop();",
            "  }",
            "  peek() {",
            "    return this.items[this.items.length - 1];",
            "  }",
            "  isEmpty() {",
            "    return this.items.length === 0;",
            "  }",
            "}",
            "// Usage:",
            "let stack = new Stack();",
            "stack.push(10);",
            "stack.push(20);",
            "console.log(stack.peek()); // 20",
            "console.log(stack.pop()); // 20",
            "console.log(stack.isEmpty()); // false",
            "```"
        ]
    },
    {
        "id": 2,
        "topicId": 4,
        "questionId": 2,
        "question": "How do you implement a queue in JavaScript?",
        "answer": [
            "You can implement a queue using an array.",
            "```js",
            "class Queue {",
            "  constructor() {",
            "    this.items = [];",
            "  }",
            "  enqueue(element) {",
            "    this.items.push(element);",
            "  }",
            "  dequeue() {",
            "    if (this.isEmpty())",
            "      return 'Underflow';",
            "    return this.items.shift();",
            "  }",
            "  front() {",
            "    return this.items[0];",
            "  }",
            "  isEmpty() {",
            "    return this.items.length === 0;",
            "  }",
            "}",
            "// Usage:",
            "let queue = new Queue();",
            "queue.enqueue(10);",
            "queue.enqueue(20);",
            "console.log(queue.front()); // 10",
            "console.log(queue.dequeue()); // 10",
            "console.log(queue.isEmpty()); // false",
            "```"
        ]
    },
    {
        "id": 3,
        "topicId": 4,
        "questionId": 3,
        "question": "How do you reverse a linked list?",
        "answer": [
            "You can reverse a linked list by iterating through the list and reversing the pointers.",
            "```js",
            "class ListNode {",
            "  constructor(value) {",
            "    this.value = value;",
            "    this.next = null;",
            "  }",
            "}",
            "function reverseLinkedList(head) {",
            "  let prev = null;",
            "  let current = head;",
            "  while (current) {",
            "    let next = current.next;",
            "    current.next = prev;",
            "    prev = current;",
            "    current = next;",
            "  }",
            "  return prev;",
            "}",
            "// Usage:",
            "let head = new ListNode(1);",
            "head.next = new ListNode(2);",
            "head.next.next = new ListNode(3);",
            "head = reverseLinkedList(head);",
            "while (head) {",
            "  console.log(head.value); // 3 2 1",
            "  head = head.next;",
            "}",
            "```"
        ]
    },
    {
        "id": 4,
        "topicId": 4,
        "questionId": 4,
        "question": "How do you detect a cycle in a linked list?",
        "answer": [
            "You can detect a cycle in a linked list using Floyd's Cycle-Finding Algorithm.",
            "```js",
            "class ListNode {",
            "  constructor(value) {",
            "    this.value = value;",
            "    this.next = null;",
            "  }",
            "}",
            "function hasCycle(head) {",
            "  let slow = head;",
            "  let fast = head;",
            "  while (fast && fast.next) {",
            "    slow = slow.next;",
            "    fast = fast.next.next;",
            "    if (slow === fast) {",
            "      return true;",
            "    }",
            "  }",
            "  return false;",
            "}",
            "// Usage:",
            "let head = new ListNode(1);",
            "head.next = new ListNode(2);",
            "head.next.next = new ListNode(3);",
            "head.next.next.next = head.next;",
            "console.log(hasCycle(head)); // true",
            "```"
        ]
    },
    {
        "id": 5,
        "topicId": 4,
        "questionId": 5,
        "question": "How do you find the middle element of a linked list?",
        "answer": [
            "You can find the middle element of a linked list using the slow and fast pointer technique.",
            "```js",
            "class ListNode {",
            "  constructor(value) {",
            "    this.value = value;",
            "    this.next = null;",
            "  }",
            "}",
            "function findMiddle(head) {",
            "  let slow = head;",
            "  let fast = head;",
            "  while (fast && fast.next) {",
            "    slow = slow.next;",
            "    fast = fast.next.next;",
            "  }",
            "  return slow;",
            "}",
            "// Usage:",
            "let head = new ListNode(1);",
            "head.next = new ListNode(2);",
            "head.next.next = new ListNode(3);",
            "console.log(findMiddle(head).value); // 2",
            "```"
        ]
    },
    {
        "id": 6,
        "topicId": 4,
        "questionId": 6,
        "question": "How do you implement a binary search algorithm?",
        "answer": [
            "You can implement a binary search algorithm using iteration or recursion.",
            "```js",
            "function binarySearch(arr, target) {",
            "  let left = 0;",
            "  let right = arr.length - 1;",
            "  while (left <= right) {",
            "    const mid = Math.floor((left + right) / 2);",
            "    if (arr[mid] === target) {",
            "      return mid;",
            "    } else if (arr[mid] < target) {",
            "      left = mid + 1;",
            "    } else {",
            "      right = mid - 1;",
            "    }",
            "  }",
            "  return -1;",
            "}",
            "// Usage:",
            "const arr = [1, 2, 3, 4, 5, 6, 7];",
            "console.log(binarySearch(arr, 4)); // 3",
            "console.log(binarySearch(arr, 8)); // -1",
            "```"
        ]
    },
    {
        "id": 7,
        "topicId": 4,
        "questionId": 7,
        "question": "How do you implement a breadth-first search (BFS) algorithm?",
        "answer": [
            "You can implement a breadth-first search (BFS) algorithm using a queue.",
            "```js",
            "class Graph {",
            "  constructor() {",
            "    this.adjacencyList = new Map();",
            "  }",
            "  addVertex(vertex) {",
            "    this.adjacencyList.set(vertex, []);",
            "  }",
            "  addEdge(vertex, edge) {",
            "    this.adjacencyList.get(vertex).push(edge);",
            "    this.adjacencyList.get(edge).push(vertex);",
            "  }",
            "  bfs(start) {",
            "    const visited = new Set();",
            "    const queue = [start];",
            "    while (queue.length) {",
            "      const vertex = queue.shift();",
            "      if (!visited.has(vertex)) {",
            "        visited.add(vertex);",
            "        const edges = this.adjacencyList.get(vertex);",
            "        for (let edge of edges) {",
            "          queue.push(edge);",
            "        }",
            "      }",
            "    }",
            "    return Array.from(visited);",
            "  }",
            "}",
            "// Usage:",
            "const graph = new Graph();",
            "graph.addVertex('A');",
            "graph.addVertex('B');",
            "graph.addVertex('C');",
            "graph.addEdge('A', 'B');",
            "graph.addEdge('A', 'C');",
            "console.log(graph.bfs('A')); // ['A', 'B', 'C']",
            "```"
        ]
    },
    {
        "id": 8,
        "topicId": 4,
        "questionId": 8,
        "question": "How do you remove duplicates from an array?",
        "answer": [
            "You can remove duplicates by using a Set, which only keeps unique values.",
            "```js",
            "function removeDuplicates(arr) {",
            "  return [...new Set(arr)];",
            "}",
            "// Usage:",
            "console.log(removeDuplicates([1, 2, 2, 3, 4, 4])); // [1, 2, 3, 4]",
            "```"
        ]
    },
    {
        "id": 9,
        "topicId": 4,
        "questionId": 9,
        "question": "How do you reverse a string?",
        "answer": [
            "You can reverse a string by converting it to an array, reversing the array, and then joining it back into a string.",
            "```js",
            "function reverseString(str) {",
            "  return str.split('').reverse().join('');",
            "}",
            "// Usage:",
            "console.log(reverseString('hello')); // 'olleh'",
            "```"
        ]
    },
    {
        "id": 10,
        "topicId": 4,
        "questionId": 10,
        "question": "How do you find the longest substring without repeating characters?",
        "answer": [
            "You can use a sliding window approach to find the longest substring without repeating characters.",
            "```js",
            "function longestUniqueSubstring(str) {",
            "  let map = new Map();",
            "  let left = 0;",
            "  let maxLength = 0;",
            "  for (let right = 0; right < str.length; right++) {",
            "    if (map.has(str[right])) {",
            "      left = Math.max(map.get(str[right]) + 1, left);",
            "    }",
            "    map.set(str[right], right);",
            "    maxLength = Math.max(maxLength, right - left + 1);",
            "  }",
            "  return maxLength;",
            "}",
            "// Usage:",
            "console.log(longestUniqueSubstring('abcabcbb')); // 3",
            "```"
        ]
    },
    {
        "id": 11,
        "topicId": 4,
        "questionId": 11,
        "question": "How do you check if a string is a palindrome?",
        "answer": [
            "You can check if a string is a palindrome by comparing it to its reverse.",
            "```js",
            "function isPalindrome(str) {",
            "  const cleanedStr = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();",
            "  return cleanedStr === cleanedStr.split('').reverse().join('');",
            "}",
            "// Usage:",
            "console.log(isPalindrome('A man, a plan, a canal, Panama')); // true",
            "```"
        ]
    },
    {
        "id": 12,
        "topicId": 4,
        "questionId": 12,
        "question": "How do you find the second largest element in an array?",
        "answer": [
            "You can find the second largest element by iterating through the array and keeping track of the largest and second largest elements.",
            "```js",
            "function secondLargest(arr) {",
            "  let largest = -Infinity;",
            "  let secondLargest = -Infinity;",
            "  for (let num of arr) {",
            "    if (num > largest) {",
            "      secondLargest = largest;",
            "      largest = num;",
            "    } else if (num > secondLargest && num < largest) {",
            "      secondLargest = num;",
            "    }",
            "  }",
            "  return secondLargest;",
            "}",
            "// Usage:",
            "console.log(secondLargest([10, 5, 20, 8])); // 10",
            "```"
        ]
    },
    {
        "id": 13,
        "topicId": 4,
        "questionId": 13,
        "question": "How do you find the first non-repeating character in a string?",
        "answer": [
            "You can use a hash map to count the occurrences of each character.",
            "```js",
            "function firstNonRepeatingCharacter(str) {",
            "  const counts = {};",
            "  for (let char of str) {",
            "    counts[char] = (counts[char] || 0) + 1;",
            "  }",
            "  for (let char of str) {",
            "    if (counts[char] === 1) {",
            "      return char;",
            "    }",
            "  }",
            "  return null;",
            "}",
            "// Usage:",
            "console.log(firstNonRepeatingCharacter('swiss')); // 'w'",
            "```"
        ]
    },
    {
        "id": 14,
        "topicId": 4,
        "questionId": 14,
        "question": "How do you find the longest palindromic substring?",
        "answer": [
            "You can use a dynamic programming approach to find the longest palindromic substring.",
            "```js",
            "function longestPalindromicSubstring(s) {",
            "  const n = s.length;",
            "  const dp = Array(n).fill(null).map(() => Array(n).fill(false));",
            "  let start = 0;",
            "  let maxLength = 1;",
            "  for (let i = 0; i < n; i++) {",
            "    dp[i][i] = true;",
            "  }",
            "  for (let length = 2; length <= n; length++) {",
            "    for (let i = 0; i <= n - length; i++) {",
            "      const j = i + length - 1;",
            "      if (s[i] === s[j]) {",
            "        if (length === 2 || dp[i + 1][j - 1]) {",
            "          dp[i][j] = true;",
            "          if (length > maxLength) {",
            "            start = i;",
            "            maxLength = length;",
            "          }",
            "        }",
            "      }",
            "    }",
            "  }",
            "  return s.substring(start, start + maxLength);",
            "}",
            "// Usage:",
            "console.log(longestPalindromicSubstring('babad')); // 'bab' or 'aba'",
            "```"
        ]
    },
    {
        "id": 15,
        "topicId": 4,
        "questionId": 15,
        "question": "How do you merge two sorted arrays?",
        "answer": [
            "You can merge two sorted arrays by iterating through both arrays and adding the smaller element to the result array.",
            "```js",
            "function mergeSortedArrays(arr1, arr2) {",
            "  let result = [];",
            "  let i = 0, j = 0;",
            "  while (i < arr1.length && j < arr2.length) {",
            "    if (arr1[i] < arr2[j]) {",
            "      result.push(arr1[i]);",
            "      i++;",
            "    } else {",
            "      result.push(arr2[j]);",
            "      j++;",
            "    }",
            "  }",
            "  while (i < arr1.length) {",
            "    result.push(arr1[i]);",
            "    i++;",
            "  }",
            "  while (j < arr2.length) {",
            "    result.push(arr2[j]);",
            "    j++;",
            "  }",
            "  return result;",
            "}",
            "// Usage:",
            "console.log(mergeSortedArrays([1, 3, 5], [2, 4, 6])); // [1, 2, 3, 4, 5, 6]",
            "```"
        ]
    },
    {
        "id": 16,
        "topicId": 4,
        "questionId": 16,
        "question": "How do you find the intersection of two arrays?",
        "answer": [
            "You can find the intersection of two arrays using a hash set to keep track of the elements.",
            "```js",
            "function intersect(arr1, arr2) {",
            "  const set1 = new Set(arr1);",
            "  return arr2.filter(item => set1.has(item));",
            "}",
            "// Usage:",
            "console.log(intersect([1, 2, 2, 1], [2, 2])); // [2, 2]",
            "```"
        ]
    },
    {
        "id": 17,
        "topicId": 4,
        "questionId": 17,
        "question": "How do you find the maximum sum of a contiguous subarray?",
        "answer": [
            "You can use Kadane's Algorithm to find the maximum sum of a contiguous subarray.",
            "```js",
            "function maxSubarraySum(arr) {",
            "  let maxSoFar = arr[0];",
            "  let maxEndingHere = arr[0];",
            "  for (let i = 1; i < arr.length; i++) {",
            "    maxEndingHere = Math.max(arr[i], maxEndingHere + arr[i]);",
            "    maxSoFar = Math.max(maxSoFar, maxEndingHere);",
            "  }",
            "  return maxSoFar;",
            "}",
            "// Usage:",
            "console.log(maxSubarraySum([1, -2, 3, 4, -1, 2, 1, -5, 4])); // 9",
            "```"
        ]
    },
    {
        "id": 18,
        "topicId": 4,
        "questionId": 18,
        "question": "How do you implement a binary search algorithm?",
        "answer": [
            "Binary search can be implemented by dividing the array in half and recursively searching in the appropriate half.",
            "```js",
            "function binarySearch(arr, target) {",
            "  let left = 0;",
            "  let right = arr.length - 1;",
            "  while (left <= right) {",
            "    let mid = Math.floor((left + right) / 2);",
            "    if (arr[mid] === target) {",
            "      return mid;",
            "    } else if (arr[mid] < target) {",
            "      left = mid + 1;",
            "    } else {",
            "      right = mid - 1;",
            "    }",
            "  }",
            "  return -1;",
            "}",
            "// Usage:",
            "console.log(binarySearch([1, 2, 3, 4, 5], 3)); // 2",
            "```"
        ]
    },
    {
        "id": 19,
        "topicId": 4,
        "questionId": 19,
        "question": "How do you perform a depth-first search (DFS) on a graph?",
        "answer": [
            "Depth-first search can be implemented using a stack to explore nodes.",
            "```js",
            "function depthFirstSearch(graph, start) {",
            "  let stack = [start];",
            "  let visited = new Set();",
            "  while (stack.length > 0) {",
            "    let node = stack.pop();",
            "    if (!visited.has(node)) {",
            "      visited.add(node);",
            "      stack.push(...graph[node]);",
            "    }",
            "  }",
            "  return Array.from(visited);",
            "}",
            "// Usage:",
            "const graph = {",
            "  'A': ['B', 'C'],",
            "  'B': ['A', 'D', 'E'],",
            "  'C': ['A', 'F', 'G'],",
            "  'D': ['B'],",
            "  'E': ['B'],",
            "  'F': ['C'],",
            "  'G': ['C']",
            "};",
            "console.log(depthFirstSearch(graph, 'A')); // ['A', 'C', 'G', 'F', 'B', 'E', 'D']",
            "```"
        ]
    },
    {
        "id": 20,
        "topicId": 4,
        "questionId": 20,
        "question": "How do you implement a breadth-first search (BFS) on a graph?",
        "answer": [
            "Breadth-first search can be implemented using a queue to explore nodes.",
            "```js",
            "function breadthFirstSearch(graph, start) {",
            "  let queue = [start];",
            "  let visited = new Set();",
            "  while (queue.length > 0) {",
            "    let node = queue.shift();",
            "    if (!visited.has(node)) {",
            "      visited.add(node);",
            "      queue.push(...graph[node]);",
            "    }",
            "  }",
            "  return Array.from(visited);",
            "}",
            "// Usage:",
            "const graph = {",
            "  'A': ['B', 'C'],",
            "  'B': ['A', 'D', 'E'],",
            "  'C': ['A', 'F', 'G'],",
            "  'D': ['B'],",
            "  'E': ['B'],",
            "  'F': ['C'],",
            "  'G': ['C']",
            "};",
            "console.log(breadthFirstSearch(graph, 'A')); // ['A', 'B', 'C', 'D', 'E', 'F', 'G']",
            "```"
        ]
    },
    {
        "id": 21,
        "topicId": 4,
        "questionId": 21,
        "question": "How do you implement a basic stack using an array?",
        "answer": [
            "A stack can be implemented using an array with `push` and `pop` methods.",
            "```js",
            "class Stack {",
            "  constructor() {",
            "    this.stack = [];",
            "  }",
            "  push(value) {",
            "    this.stack.push(value);",
            "  }",
            "  pop() {",
            "    return this.stack.pop();",
            "  }",
            "  peek() {",
            "    return this.stack[this.stack.length - 1];",
            "  }",
            "  isEmpty() {",
            "    return this.stack.length === 0;",
            "  }",
            "}",
            "// Usage:",
            "const stack = new Stack();",
            "stack.push(1);",
            "stack.push(2);",
            "console.log(stack.pop()); // 2",
            "console.log(stack.peek()); // 1",
            "```"
        ]
    },
    {
        "id": 22,
        "topicId": 4,
        "questionId": 22,
        "question": "How do you implement a basic queue using an array?",
        "answer": [
            "A queue can be implemented using an array with `push` and `shift` methods.",
            "```js",
            "class Queue {",
            "  constructor() {",
            "    this.queue = [];",
            "  }",
            "  enqueue(value) {",
            "    this.queue.push(value);",
            "  }",
            "  dequeue() {",
            "    return this.queue.shift();",
            "  }",
            "  peek() {",
            "    return this.queue[0];",
            "  }",
            "  isEmpty() {",
            "    return this.queue.length === 0;",
            "  }",
            "}",
            "// Usage:",
            "const queue = new Queue();",
            "queue.enqueue(1);",
            "queue.enqueue(2);",
            "console.log(queue.dequeue()); // 1",
            "console.log(queue.peek()); // 2",
            "```"
        ]
    },
    {
        "id": 23,
        "topicId": 4,
        "questionId": 23,
        "question": "How do you implement a basic linked list?",
        "answer": [
            "A linked list can be implemented using nodes with references to the next node.",
            "```js",
            "class Node {",
            "  constructor(value) {",
            "    this.value = value;",
            "    this.next = null;",
            "  }",
            "}",
            "class LinkedList {",
            "  constructor() {",
            "    this.head = null;",
            "  }",
            "  append(value) {",
            "    const newNode = new Node(value);",
            "    if (this.head === null) {",
            "      this.head = newNode;",
            "    } else {",
            "      let current = this.head;",
            "      while (current.next) {",
            "        current = current.next;",
            "      }",
            "      current.next = newNode;",
            "    }",
            "  }",
            "  printList() {",
            "    let current = this.head;",
            "    while (current) {",
            "      console.log(current.value);",
            "      current = current.next;",
            "    }",
            "  }",
            "}",
            "// Usage:",
            "const list = new LinkedList();",
            "list.append(1);",
            "list.append(2);",
            "list.printList(); // 1, 2",
            "```"
        ]
    },
    {
        "id": 24,
        "topicId": 4,
        "questionId": 24,
        "question": "How do you implement a basic binary search tree?",
        "answer": [
            "A binary search tree can be implemented with nodes where each node has a left and right child.",
            "```js",
            "class TreeNode {",
            "  constructor(value) {",
            "    this.value = value;",
            "    this.left = null;",
            "    this.right = null;",
            "  }",
            "}",
            "class BinarySearchTree {",
            "  constructor() {",
            "    this.root = null;",
            "  }",
            "  insert(value) {",
            "    const newNode = new TreeNode(value);",
            "    if (this.root === null) {",
            "      this.root = newNode;",
            "    } else {",
            "      this._insertNode(this.root, newNode);",
            "    }",
            "  }",
            "  _insertNode(node, newNode) {",
            "    if (newNode.value < node.value) {",
            "      if (node.left === null) {",
            "        node.left = newNode;",
            "      } else {",
            "        this._insertNode(node.left, newNode);",
            "      }",
            "    } else {",
            "      if (node.right === null) {",
            "        node.right = newNode;",
            "      } else {",
            "        this._insertNode(node.right, newNode);",
            "      }",
            "    }",
            "  }",
            "  inorderTraversal(node = this.root) {",
            "    if (node !== null) {",
            "      this.inorderTraversal(node.left);",
            "      console.log(node.value);",
            "      this.inorderTraversal(node.right);",
            "    }",
            "  }",
            "}",
            "// Usage:",
            "const bst = new BinarySearchTree();",
            "bst.insert(10);",
            "bst.insert(5);",
            "bst.insert(15);",
            "bst.inorderTraversal(); // 5, 10, 15",
            "```"
        ]
    },
    {
        "id": 25,
        "topicId": 4,
        "questionId": 25,
        "question": "How do you find the nth Fibonacci number using recursion?",
        "answer": [
            "You can find the nth Fibonacci number using a recursive function.",
            "```js",
            "function fibonacci(n) {",
            "  if (n <= 1) {",
            "    return n;",
            "  }",
            "  return fibonacci(n - 1) + fibonacci(n - 2);",
            "}",
            "// Usage:",
            "console.log(fibonacci(6)); // 8",
            "```"
        ]
    },
    {
        "id": 26,
        "topicId": 4,
        "questionId": 26,
        "question": "How do you find the nth Fibonacci number using iteration?",
        "answer": [
            "You can find the nth Fibonacci number using an iterative approach.",
            "```js",
            "function fibonacci(n) {",
            "  let a = 0, b = 1;",
            "  for (let i = 2; i <= n; i++) {",
            "    const next = a + b;",
            "    a = b;",
            "    b = next;",
            "  }",
            "  return b;",
            "}",
            "// Usage:",
            "console.log(fibonacci(6)); // 8",
            "```"
        ]
    },
    {
        "id": 27,
        "topicId": 4,
        "questionId": 27,
        "question": "How do you implement a basic hash table?",
        "answer": [
            "A hash table can be implemented using an array and a hash function.",
            "```js",
            "class HashTable {",
            "  constructor(size) {",
            "    this.size = size;",
            "    this.table = new Array(size);",
            "  }",
            "  hash(key) {",
            "    let hash = 0;",
            "    for (let char of key) {",
            "      hash = (hash + char.charCodeAt(0)) % this.size;",
            "    }",
            "    return hash;",
            "  }",
            "  set(key, value) {",
            "    const index = this.hash(key);",
            "    if (!this.table[index]) {",
            "      this.table[index] = [];",
            "    }",
            "    this.table[index].push([key, value]);",
            "  }",
            "  get(key) {",
            "    const index = this.hash(key);",
            "    if (this.table[index]) {",
            "      for (let [k, v] of this.table[index]) {",
            "        if (k === key) {",
            "          return v;",
            "        }",
            "      }",
            "    }",
            "    return undefined;",
            "  }",
            "}",
            "// Usage:",
            "const hashTable = new HashTable(10);",
            "hashTable.set('name', 'John');",
            "console.log(hashTable.get('name')); // 'John'",
            "```"
        ]
    },
    {
        "id": 28,
        "topicId": 4,
        "questionId": 28,
        "question": "How do you find the kth largest element in an array?",
        "answer": [
            "You can use a min-heap to find the kth largest element.",
            "```js",
            "function findKthLargest(nums, k) {",
            "  const minHeap = new MinHeap();",
            "  for (let num of nums) {",
            "    minHeap.add(num);",
            "    if (minHeap.size() > k) {",
            "      minHeap.remove();",
            "    }",
            "  }",
            "  return minHeap.peek();",
            "}",
            "class MinHeap {",
            "  constructor() {",
            "    this.heap = [];",
            "  }",
            "  add(num) {",
            "    this.heap.push(num);",
            "    this.heapifyUp();",
            "  }",
            "  remove() {",
            "    if (this.size() === 0) return;",
            "    const root = this.heap[0];",
            "    this.heap[0] = this.heap.pop();",
            "    this.heapifyDown();",
            "    return root;",
            "  }",
            "  peek() {",
            "    return this.heap[0];",
            "  }",
            "  size() {",
            "    return this.heap.length;",
            "  }",
            "  heapifyUp() {",
            "    let index = this.heap.length - 1;",
            "    while (index > 0) {",
            "      let parentIndex = Math.floor((index - 1) / 2);",
            "      if (this.heap[index] >= this.heap[parentIndex]) break;",
            "      [this.heap[index], this.heap[parentIndex]] = [this.heap[parentIndex], this.heap[index]];",
            "      index = parentIndex;",
            "    }",
            "  }",
            "  heapifyDown() {",
            "    let index = 0;",
            "    while (true) {",
            "      let leftChildIndex = 2 * index + 1;",
            "      let rightChildIndex = 2 * index + 2;",
            "      let smallest = index;",
            "      if (leftChildIndex < this.heap.length && this.heap[leftChildIndex] < this.heap[smallest]) {",
            "        smallest = leftChildIndex;",
            "      }",
            "      if (rightChildIndex < this.heap.length && this.heap[rightChildIndex] < this.heap[smallest]) {",
            "        smallest = rightChildIndex;",
            "      }",
            "      if (smallest === index) break;",
            "      [this.heap[index], this.heap[smallest]] = [this.heap[smallest], this.heap[index]];",
            "      index = smallest;",
            "    }",
            "  }",
            "}",
            "// Usage:",
            "console.log(findKthLargest([3, 2, 1, 5, 6, 4], 2)); // 5",
            "```"
        ]
    },
    {
        "id": 29,
        "topicId": 4,
        "questionId": 29,
        "question": "How do you find the intersection of two arrays?",
        "answer": [
            "You can find the intersection by using a Set for one array and filtering the second array.",
            "```js",
            "function intersect(arr1, arr2) {",
            "  const set1 = new Set(arr1);",
            "  return arr2.filter(item => set1.has(item));",
            "}",
            "// Usage:",
            "console.log(intersect([1, 2, 3], [2, 3, 4])); // [2, 3]",
            "```"
        ]
    },
    {
        "id": 30,
        "topicId": 4,
        "questionId": 30,
        "question": "How do you remove duplicates from an array?",
        "answer": [
            "You can remove duplicates by converting the array to a Set and then back to an array.",
            "```js",
            "function removeDuplicates(arr) {",
            "  return [...new Set(arr)];",
            "}",
            "// Usage:",
            "console.log(removeDuplicates([1, 2, 2, 3, 4, 4])); // [1, 2, 3, 4]",
            "```"
        ]
    },
    {
        "id": 31,
        "topicId": 4,
        "questionId": 31,
        "question": "How do you reverse a linked list?",
        "answer": [
            "You can reverse a linked list by iterating through the list and reversing the pointers.",
            "```js",
            "class ListNode {",
            "  constructor(value) {",
            "    this.value = value;",
            "    this.next = null;",
            "  }",
            "}",
            "function reverseList(head) {",
            "  let prev = null;",
            "  let current = head;",
            "  while (current !== null) {",
            "    let next = current.next;",
            "    current.next = prev;",
            "    prev = current;",
            "    current = next;",
            "  }",
            "  return prev;",
            "}",
            "// Usage:",
            "const head = new ListNode(1);",
            "head.next = new ListNode(2);",
            "head.next.next = new ListNode(3);",
            "const reversedHead = reverseList(head);",
            "```"
        ]
    },
    {
        "id": 32,
        "topicId": 4,
        "questionId": 32,
        "question": "How do you find the middle element of a linked list?",
        "answer": [
            "You can find the middle element by using the slow and fast pointer approach.",
            "```js",
            "class ListNode {",
            "  constructor(value) {",
            "    this.value = value;",
            "    this.next = null;",
            "  }",
            "}",
            "function findMiddle(head) {",
            "  let slow = head;",
            "  let fast = head;",
            "  while (fast !== null && fast.next !== null) {",
            "    slow = slow.next;",
            "    fast = fast.next.next;",
            "  }",
            "  return slow;",
            "}",
            "// Usage:",
            "const head = new ListNode(1);",
            "head.next = new ListNode(2);",
            "head.next.next = new ListNode(3);",
            "head.next.next.next = new ListNode(4);",
            "const middle = findMiddle(head);",
            "```"
        ]
    },
    {
        "id": 33,
        "topicId": 4,
        "questionId": 33,
        "question": "How do you detect a cycle in a linked list?",
        "answer": [
            "You can detect a cycle using the slow and fast pointer approach.",
            "```js",
            "class ListNode {",
            "  constructor(value) {",
            "    this.value = value;",
            "    this.next = null;",
            "  }",
            "}",
            "function hasCycle(head) {",
            "  let slow = head;",
            "  let fast = head;",
            "  while (fast !== null && fast.next !== null) {",
            "    slow = slow.next;",
            "    fast = fast.next.next;",
            "    if (slow === fast) {",
            "      return true;",
            "    }",
            "  }",
            "  return false;",
            "}",
            "// Usage:",
            "const head = new ListNode(1);",
            "head.next = new ListNode(2);",
            "head.next.next = new ListNode(3);",
            "head.next.next.next = head.next; // Creates a cycle",
            "console.log(hasCycle(head)); // true",
            "```"
        ]
    },
    {
        "id": 34,
        "topicId": 4,
        "questionId": 34,
        "question": "How do you implement a basic hash table?",
        "answer": [
            "You can implement a basic hash table using an array and a hash function.",
            "```js",
            "class HashTable {",
            "  constructor(size) {",
            "    this.size = size;",
            "    this.table = new Array(size);",
            "  }",
            "  hash(key) {",
            "    let hash = 0;",
            "    for (let char of key) {",
            "      hash = (hash + char.charCodeAt(0)) % this.size;",
            "    }",
            "    return hash;",
            "  }",
            "  set(key, value) {",
            "    const index = this.hash(key);",
            "    this.table[index] = value;",
            "  }",
            "  get(key) {",
            "    const index = this.hash(key);",
            "    return this.table[index];",
            "  }",
            "}",
            "// Usage:",
            "const hashTable = new HashTable(10);",
            "hashTable.set('name', 'Alice');",
            "console.log(hashTable.get('name')); // 'Alice'",
            "```"
        ]
    },
    {
        "id": 35,
        "topicId": 4,
        "questionId": 35,
        "question": "How do you find the shortest path in a graph using Dijkstra's algorithm?",
        "answer": [
            "You can find the shortest path using Dijkstra's algorithm with a priority queue.",
            "```js",
            "function dijkstra(graph, start) {",
            "  const distances = {};",
            "  const priorityQueue = new PriorityQueue();",
            "  for (let node in graph) {",
            "    distances[node] = Infinity;",
            "  }",
            "  distances[start] = 0;",
            "  priorityQueue.enqueue(start, 0);",
            "  while (!priorityQueue.isEmpty()) {",
            "    const { value: node, priority } = priorityQueue.dequeue();",
            "    if (priority > distances[node]) continue;",
            "    for (let neighbor in graph[node]) {",
            "      const newDist = distances[node] + graph[node][neighbor];",
            "      if (newDist < distances[neighbor]) {",
            "        distances[neighbor] = newDist;",
            "        priorityQueue.enqueue(neighbor, newDist);",
            "      }",
            "    }",
            "  }",
            "  return distances;",
            "}",
            "// Usage:",
            "const graph = {",
            "  A: { B: 1, C: 4 },",
            "  B: { C: 2, D: 5 },",
            "  C: { D: 1 },",
            "  D: {}",
            "};",
            "console.log(dijkstra(graph, 'A'));",
            "```"
        ]
    },
    {
        "id": 36,
        "topicId": 4,
        "questionId": 36,
        "question": "How do you check if a binary tree is balanced?",
        "answer": [
            "You can check if a binary tree is balanced by calculating the height of each subtree.",
            "```js",
            "class TreeNode {",
            "  constructor(value) {",
            "    this.value = value;",
            "    this.left = null;",
            "    this.right = null;",
            "  }",
            "}",
            "function isBalanced(root) {",
            "  function height(node) {",
            "    if (node === null) return 0;",
            "    const leftHeight = height(node.left);",
            "    const rightHeight = height(node.right);",
            "    if (leftHeight === -1 || rightHeight === -1 || Math.abs(leftHeight - rightHeight) > 1) {",
            "      return -1;",
            "    }",
            "    return Math.max(leftHeight, rightHeight) + 1;",
            "  }",
            "  return height(root) !== -1;",
            "}",
            "// Usage:",
            "const root = new TreeNode(1);",
            "root.left = new TreeNode(2);",
            "root.right = new TreeNode(3);",
            "root.left.left = new TreeNode(4);",
            "root.left.right = new TreeNode(5);",
            "console.log(isBalanced(root)); // true",
            "```"
        ]
    },
    {
        "id": 37,
        "topicId": 4,
        "questionId": 37,
        "question": "How do you find the longest substring without repeating characters?",
        "answer": [
            "You can find the longest substring without repeating characters using a sliding window approach.",
            "```js",
            "function longestUniqueSubstring(s) {",
            "  const map = new Map();",
            "  let start = 0;",
            "  let maxLength = 0;",
            "  for (let end = 0; end < s.length; end++) {",
            "    if (map.has(s[end])) {",
            "      start = Math.max(map.get(s[end]) + 1, start);",
            "    }",
            "    map.set(s[end], end);",
            "    maxLength = Math.max(maxLength, end - start + 1);",
            "  }",
            "  return maxLength;",
            "}",
            "// Usage:",
            "console.log(longestUniqueSubstring('abcabcbb')); // 3",
            "```"
        ]
    },
    {
        "id": 38,
        "topicId": 4,
        "questionId": 38,
        "question": "How do you implement a queue using two stacks?",
        "answer": [
            "You can implement a queue using two stacks by maintaining two stacks for enqueue and dequeue operations.",
            "```js",
            "class QueueUsingStacks {",
            "  constructor() {",
            "    this.stack1 = [];",
            "    this.stack2 = [];",
            "  }",
            "  enqueue(value) {",
            "    this.stack1.push(value);",
            "  }",
            "  dequeue() {",
            "    if (this.stack2.length === 0) {",
            "      while (this.stack1.length > 0) {",
            "        this.stack2.push(this.stack1.pop());",
            "      }",
            "    }",
            "    return this.stack2.pop();",
            "  }",
            "}",
            "// Usage:",
            "const queue = new QueueUsingStacks();",
            "queue.enqueue(1);",
            "queue.enqueue(2);",
            "console.log(queue.dequeue()); // 1",
            "```"
        ]
    },
    {
        "id": 39,
        "topicId": 4,
        "questionId": 39,
        "question": "How do you find the first non-repeating character in a string?",
        "answer": [
            "You can find the first non-repeating character by counting occurrences and then scanning the string.",
            "```js",
            "function firstUniqChar(s) {",
            "  const count = {};",
            "  for (let char of s) {",
            "    count[char] = (count[char] || 0) + 1;",
            "  }",
            "  for (let char of s) {",
            "    if (count[char] === 1) {",
            "      return char;",
            "    }",
            "  }",
            "  return null;",
            "}",
            "// Usage:",
            "console.log(firstUniqChar('loveleetcode')); // 'v'",
            "```"
        ]
    },
    {
        "id": 40,
        "topicId": 4,
        "questionId": 40,
        "question": "How do you find the maximum sum subarray (Kadane's Algorithm)?",
        "answer": [
            "You can find the maximum sum subarray using Kadane's Algorithm.",
            "```js",
            "function maxSubArraySum(arr) {",
            "  let maxSoFar = arr[0];",
            "  let maxEndingHere = arr[0];",
            "  for (let i = 1; i < arr.length; i++) {",
            "    maxEndingHere = Math.max(arr[i], maxEndingHere + arr[i]);",
            "    maxSoFar = Math.max(maxSoFar, maxEndingHere);",
            "  }",
            "  return maxSoFar;",
            "}",
            "// Usage:",
            "console.log(maxSubArraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4])); // 6",
            "```"
        ]
    },
    {
        "id": 41,
        "topicId": 4,
        "questionId": 41,
        "question": "How do you check if a string is a palindrome?",
        "answer": [
            "You can check if a string is a palindrome by comparing the string to its reverse.",
            "```js",
            "function isPalindrome(s) {",
            "  const reversed = s.split('').reverse().join('');",
            "  return s === reversed;",
            "}",
            "// Usage:",
            "console.log(isPalindrome('racecar')); // true",
            "console.log(isPalindrome('hello')); // false",
            "```"
        ]
    },
    {
        "id": 42,
        "topicId": 4,
        "questionId": 42,
        "question": "How do you find the longest common prefix in an array of strings?",
        "answer": [
            "You can find the longest common prefix by comparing characters from each string.",
            "```js",
            "function longestCommonPrefix(strs) {",
            "  if (strs.length === 0) return '';",
            "  let prefix = strs[0];",
            "  for (let i = 1; i < strs.length; i++) {",
            "    while (strs[i].indexOf(prefix) !== 0) {",
            "      prefix = prefix.substring(0, prefix.length - 1);",
            "    }",
            "  }",
            "  return prefix;",
            "}",
            "// Usage:",
            "console.log(longestCommonPrefix(['flower', 'flow', 'flight'])); // 'fl'",
            "```"
        ]
    },
    {
        "id": 43,
        "topicId": 4,
        "questionId": 43,
        "question": "How do you find the duplicate number in an array where each number appears once except one?",
        "answer": [
            "You can find the duplicate number using the Floyd's Tortoise and Hare algorithm.",
            "```js",
            "function findDuplicate(nums) {",
            "  let slow = nums[0];",
            "  let fast = nums[0];",
            "  do {",
            "    slow = nums[slow];",
            "    fast = nums[nums[fast]];",
            "  } while (slow !== fast);",
            "  let finder = nums[0];",
            "  while (finder !== slow) {",
            "    finder = nums[finder];",
            "    slow = nums[slow];",
            "  }",
            "  return finder;",
            "}",
            "// Usage:",
            "console.log(findDuplicate([1, 3, 4, 2, 2])); // 2",
            "```"
        ]
    },
    {
        "id": 44,
        "topicId": 4,
        "questionId": 44,
        "question": "How do you find the maximum product of three integers in an array?",
        "answer": [
            "You can find the maximum product of three integers by sorting the array and comparing the product of the top three and bottom two.",
            "```js",
            "function maxProductOfThree(nums) {",
            "  nums.sort((a, b) => a - b);",
            "  const n = nums.length;",
            "  return Math.max(nums[n - 1] * nums[n - 2] * nums[n - 3], nums[0] * nums[1] * nums[n - 1]);",
            "}",
            "// Usage:",
            "console.log(maxProductOfThree([-10, -10, 5, 2])); // 500",
            "```"
        ]
    },
    {
        "id": 45,
        "topicId": 4,
        "questionId": 45,
        "question": "How do you find the length of a linked list?",
        "answer": [
            "You can find the length of a linked list by iterating through each node.",
            "```js",
            "class ListNode {",
            "  constructor(value) {",
            "    this.value = value;",
            "    this.next = null;",
            "  }",
            "}",
            "function getLength(head) {",
            "  let length = 0;",
            "  let current = head;",
            "  while (current !== null) {",
            "    length++;",
            "    current = current.next;",
            "  }",
            "  return length;",
            "}",
            "// Usage:",
            "const head = new ListNode(1);",
            "head.next = new ListNode(2);",
            "head.next.next = new ListNode(3);",
            "console.log(getLength(head)); // 3",
            "```"
        ]
    },
    {
        "id": 46,
        "topicId": 4,
        "questionId": 46,
        "question": "How do you rotate an array to the right by k steps?",
        "answer": [
            "You can rotate an array to the right by reversing parts of the array.",
            "```js",
            "function rotateArray(nums, k) {",
            "  k = k % nums.length;",
            "  reverse(nums, 0, nums.length - 1);",
            "  reverse(nums, 0, k - 1);",
            "  reverse(nums, k, nums.length - 1);",
            "}",
            "function reverse(arr, start, end) {",
            "  while (start < end) {",
            "    [arr[start], arr[end]] = [arr[end], arr[start]];",
            "    start++;",
            "    end--;",
            "  }",
            "}",
            "// Usage:",
            "const arr = [1, 2, 3, 4, 5, 6, 7];",
            "rotateArray(arr, 3);",
            "console.log(arr); // [5, 6, 7, 1, 2, 3, 4]",
            "```"
        ]
    },
    {
        "id": 47,
        "topicId": 4,
        "questionId": 47,
        "question": "How do you find the common elements in two arrays?",
        "answer": [
            "You can find common elements using a Set for one array and filtering the second array.",
            "```js",
            "function findCommonElements(arr1, arr2) {",
            "  const set1 = new Set(arr1);",
            "  return arr2.filter(item => set1.has(item));",
            "}",
            "// Usage:",
            "console.log(findCommonElements([1, 2, 3], [2, 3, 4])); // [2, 3]",
            "```"
        ]
    },
    {
        "id": 48,
        "topicId": 4,
        "questionId": 48,
        "question": "How do you find the maximum value in a binary search tree (BST)?",
        "answer": [
            "You can find the maximum value in a BST by traversing to the rightmost node.",
            "```js",
            "class TreeNode {",
            "  constructor(value) {",
            "    this.value = value;",
            "    this.left = null;",
            "    this.right = null;",
            "  }",
            "}",
            "function findMax(root) {",
            "  let current = root;",
            "  while (current.right !== null) {",
            "    current = current.right;",
            "  }",
            "  return current.value;",
            "}",
            "// Usage:",
            "const root = new TreeNode(10);",
            "root.right = new TreeNode(15);",
            "root.right.right = new TreeNode(20);",
            "console.log(findMax(root)); // 20",
            "```"
        ]
    },
    {
        "id": 49,
        "topicId": 4,
        "questionId": 49,
        "question": "How do you check if a binary tree is a valid binary search tree (BST)?",
        "answer": [
            "You can check if a binary tree is a BST by verifying that each node adheres to the BST property.",
            "```js",
            "function isValidBST(root, min = -Infinity, max = Infinity) {",
            "  if (root === null) return true;",
            "  if (root.value <= min || root.value >= max) return false;",
            "  return isValidBST(root.left, min, root.value) &&",
            "         isValidBST(root.right, root.value, max);",
            "}",
            "// Usage:",
            "const root = new TreeNode(2);",
            "root.left = new TreeNode(1);",
            "root.right = new TreeNode(3);",
            "console.log(isValidBST(root)); // true",
            "```"
        ]
    },
    {
        "id": 50,
        "topicId": 4,
        "questionId": 50,
        "question": "How do you implement a queue using two stacks?",
        "answer": [
            "You can implement a queue using two stacks by using one stack for enqueue operations and another stack for dequeue operations.",
            "```js",
            "class QueueWithStacks {",
            "  constructor() {",
            "    this.stack1 = [];",
            "    this.stack2 = [];",
            "  }",
            "  enqueue(value) {",
            "    this.stack1.push(value);",
            "  }",
            "  dequeue() {",
            "    if (this.stack2.length === 0) {",
            "      while (this.stack1.length > 0) {",
            "        this.stack2.push(this.stack1.pop());",
            "      }",
            "    }",
            "    return this.stack2.pop();",
            "  }",
            "}",
            "// Usage:",
            "const queue = new QueueWithStacks();",
            "queue.enqueue(1);",
            "queue.enqueue(2);",
            "console.log(queue.dequeue()); // 1",
            "console.log(queue.dequeue()); // 2",
            "```"
        ]
    }
]
